from django.contrib import admin
from .models import Category, Post, Course, Lesson, Comment, CourseCategory, ContactSettings, SiteSettings
from .models import UserProfile  # Thay ƒë·ªïi t·ª´ Profile th√†nh UserProfile
from .models import ChatSettings, ChatMessage
from .models import AboutPage, HomePageSettings
from .models import DocumentCategory, Document, DocumentTag, DocumentVersion, DocumentAccess
from .models import Project, PublicProject
from .seo_analyzer import SEOAnalyzer
from django.utils.html import format_html
from django.urls import path
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

@admin.register(SiteSettings)
class SiteSettingsAdmin(admin.ModelAdmin):
    list_display = ['company_name', 'footer_phone', 'footer_email']
    fieldsets = [
        ('üè¢ Th√¥ng tin c√¥ng ty & Logo', {
            'fields': ['logo', 'company_name', 'company_slogan', 'company_description'],
            'classes': ['wide'],
            'description': 'Logo s·∫Ω hi·ªÉn th·ªã tr√™n navbar. Th√¥ng tin c√¥ng ty d√πng cho SEO v√† gi·ªõi thi·ªáu chung.'
        }),
        ('üß≠ C√†i ƒë·∫∑t Navbar (Menu ƒëi·ªÅu h∆∞·ªõng)', {
            'fields': ['navbar_bg_color', 'navbar_text_color', 'navbar_brand_size', 'navbar_link_size', 'navbar_sticky'],
            'classes': ['collapse']
        }),
        ('ü¶∂ C√†i ƒë·∫∑t Footer (Ch√¢n trang)', {
            'fields': ['footer_bg_color', 'footer_text_color', 'footer_link_color', 'footer_copyright'],
            'classes': ['collapse']
        }),
        ('üìç Th√¥ng tin li√™n h·ªá Footer', {
            'fields': ['footer_address', 'footer_phone', 'footer_email'],
            'classes': ['wide']
        }),
        ('üåê Li√™n k·∫øt m·∫°ng x√£ h·ªôi', {
            'fields': ['facebook_url', 'linkedin_url', 'youtube_url', 'twitter_url', 'zalo_phone'],
            'classes': ['collapse']
        }),
        ('üé® M√†u s·∫Øc chung website', {
            'fields': ['primary_color', 'secondary_color', 'success_color', 'warning_color', 'danger_color'],
            'classes': ['collapse'],
            'description': 'M√†u s·∫Øc m·∫∑c ƒë·ªãnh cho c√°c trang ch∆∞a c√≥ c·∫•u h√¨nh ri√™ng.'
        }),
        ('‚úçÔ∏è Typography (Font ch·ªØ)', {
            'fields': ['font_family', 'heading_font_family'],
            'classes': ['collapse']
        }),
        ('üîç SEO chung cho website', {
            'fields': ['site_title', 'site_description', 'site_keywords'],
            'classes': ['wide'],
            'description': 'Meta tags m·∫∑c ƒë·ªãnh cho to√†n website. C√°c trang ri√™ng c√≥ th·ªÉ ghi ƒë√®.'
        }),
        ('‚öôÔ∏è C√†i ƒë·∫∑t hi·ªÉn th·ªã', {
            'fields': ['show_breadcrumb', 'show_scroll_top'],
            'classes': ['collapse']
        }),
        ('üìû Li√™n h·ªá nhanh (Floating)', {
            'fields': ['enable_floating_contact', 'floating_phone', 'floating_zalo'],
            'classes': ['collapse'],
            'description': 'N√∫t li√™n h·ªá nhanh hi·ªÉn th·ªã c·ªë ƒë·ªãnh ·ªü g√≥c m√†n h√¨nh.'
        }),
    ]
    
    def has_add_permission(self, request):
        # Ch·ªâ cho ph√©p t·∫°o m·ªôt b·∫£n ghi c·∫•u h√¨nh
        return not SiteSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # Kh√¥ng cho ph√©p x√≥a b·∫£n ghi c·∫•u h√¨nh
        return False

@admin.register(ContactSettings)
class ContactSettingsAdmin(admin.ModelAdmin):
    fieldsets = [
        ('Th√¥ng tin li√™n h·ªá', {
            'fields': ['recipient_email', 'address', 'phone_numbers', 'business_hours', 'email_contact']
        }),
        ('B·∫£n ƒë·ªì', {
            'fields': ['maps_link', 'maps_embed'],
            'classes': ['collapse'],
            'description': 'Link Google Maps s·∫Ω ƒë∆∞·ª£c d√πng cho n√∫t "Xem b·∫£n ƒë·ªì". M√£ nh√∫ng ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì tr√™n trang.'
        })
    ]
    
    def has_add_permission(self, request):
        # Ch·ªâ cho ph√©p t·∫°o m·ªôt b·∫£n ghi c·∫•u h√¨nh
        return not ContactSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # Kh√¥ng cho ph√©p x√≥a b·∫£n ghi c·∫•u h√¨nh
        return False

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('title', 'author', 'category', 'created_at', 'published', 'view_count', 'seo_score_display')
    list_filter = ('published', 'category', 'created_at', 'tags')
    search_fields = ('title', 'content', 'meta_title', 'meta_description', 'meta_keywords')
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_at'
    filter_horizontal = ('tags',)
    
    # Th√™m custom template v·ªõi SEO analyzer
    change_form_template = 'admin/api/post/change_form.html'
    add_form_template = 'admin/api/post/change_form.html'
    
    fieldsets = [
        ('üìù Th√¥ng tin c∆° b·∫£n', {
            'fields': ['title', 'slug', 'author', 'category', 'featured_image']
        }),
        ('üìñ N·ªôi dung', {
            'fields': ['summary', 'content'],
            'classes': ['wide']
        }),
        ('üîç SEO & Meta Tags', {
            'fields': ['meta_title', 'meta_description', 'meta_keywords'],
            'classes': ['wide'],
            'description': 'T·ªëi ∆∞u h√≥a cho c√¥ng c·ª• t√¨m ki·∫øm. ƒê·ªÉ tr·ªëng s·∫Ω s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.'
        }),
        ('üè∑Ô∏è Ph√¢n lo·∫°i', {
            'fields': ['tags'],
            'classes': ['collapse']
        }),
        ('‚öôÔ∏è C√†i ƒë·∫∑t xu·∫•t b·∫£n', {
            'fields': ['published'],
            'classes': ['collapse']
        }),
    ]
    
    def seo_score_display(self, obj):
        """Hi·ªÉn th·ªã ƒëi·ªÉm SEO trong list view"""
        if obj.title and obj.content:
            # Kh·ªüi t·∫°o SEOAnalyzer v·ªõi tham s·ªë b·∫Øt bu·ªôc
            analyzer = SEOAnalyzer(
                title=obj.meta_title or obj.title,
                description=obj.meta_description or '',
                content=obj.content,
                keywords=obj.meta_keywords or ''
            )
            analysis = analyzer.analyze_seo(
                title=obj.meta_title or obj.title,
                meta_description=obj.meta_description or '',
                content=obj.content,
                keywords=obj.meta_keywords or '',
                slug=obj.slug,
                featured_image=obj.featured_image.url if obj.featured_image else None
            )
            score = analysis['percentage']
            
            if score >= 80:
                color = '#28a745'  # Xanh l√°
                icon = '‚úÖ'
            elif score >= 60:
                color = '#ffc107'  # V√†ng
                icon = '‚ö†Ô∏è'
            else:
                color = '#dc3545'  # ƒê·ªè
                icon = '‚ùå'
                
            return format_html(
                '<span style="color: {}; font-weight: bold;">{} {}%</span>',
                color, icon, score
            )
        return format_html('<span style="color: #6c757d;">‚Äî</span>')
    
    seo_score_display.short_description = 'ƒêi·ªÉm SEO'
    seo_score_display.admin_order_field = 'title'
    
    def get_urls(self):
        """Th√™m URL cho AJAX SEO analysis"""
        urls = super().get_urls()
        custom_urls = [
            path('seo-analysis/', self.admin_site.admin_view(self.seo_analysis_view), name='post_seo_analysis'),
        ]
        return custom_urls + urls
    
    @csrf_exempt
    def seo_analysis_view(self, request):
        """API endpoint ƒë·ªÉ ph√¢n t√≠ch SEO real-time"""
        if request.method == 'POST':
            try:
                data = json.loads(request.body)
                
                title = data.get('title', '')
                meta_title = data.get('meta_title', '')
                meta_description = data.get('meta_description', '')
                content = data.get('content', '')
                keywords = data.get('meta_keywords', '')
                slug = data.get('slug', '')
                
                # Kh·ªüi t·∫°o SEOAnalyzer v·ªõi tham s·ªë b·∫Øt bu·ªôc
                analyzer = SEOAnalyzer(
                    title=meta_title or title,
                    description=meta_description,
                    content=content,
                    keywords=keywords
                )
                analysis = analyzer.analyze_seo(
                    title=meta_title or title,
                    meta_description=meta_description,
                    content=content,
                    keywords=keywords,
                    slug=slug,
                    featured_image=None  # Kh√¥ng th·ªÉ analyze file upload real-time
                )
                
                return JsonResponse({
                    'success': True,
                    'analysis': analysis
                })
                
            except Exception as e:
                return JsonResponse({
                    'success': False,
                    'error': str(e)
                })
        
        return JsonResponse({'success': False, 'error': 'Method not allowed'})
    
    def save_model(self, request, obj, form, change):
        """T·ª± ƒë·ªông set author v√† t·∫°o meta fields n·∫øu tr·ªëng"""
        if not change:  # T·∫°o m·ªõi
            if not obj.author:
                obj.author = request.user
        
        # T·ª± ƒë·ªông t·∫°o meta_title n·∫øu tr·ªëng
        if not obj.meta_title and obj.title:
            obj.meta_title = obj.title[:60]  # Gi·ªõi h·∫°n 60 k√Ω t·ª±
            
        # T·ª± ƒë·ªông t·∫°o meta_description n·∫øu tr·ªëng
        if not obj.meta_description and obj.summary:
            obj.meta_description = obj.summary[:160]  # Gi·ªõi h·∫°n 160 k√Ω t·ª±
        
        super().save_model(request, obj, form, change)

@admin.register(CourseCategory)
class CourseCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}

@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    list_display = ('title', 'instructor', 'category', 'price', 'created_at', 'published')
    list_filter = ('published', 'category', 'created_at')
    search_fields = ('title', 'description')
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_at'

@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ('title', 'course', 'order')
    list_filter = ('course',)
    search_fields = ('title', 'content')

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    # Thay 'approved' b·∫±ng 'is_active'
    list_display = ['name', 'email', 'post', 'is_active', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'email', 'content']
    actions = ['approve_comments']
    
    def approve_comments(self, request, queryset):
        queryset.update(is_active=True)
    approve_comments.short_description = "Approve selected comments"

@admin.register(UserProfile)
class UserProfileAdmin(admin.ModelAdmin):
    list_display = ['user', 'msnv', 'role', 'department', 'phone']
    list_filter = ['role', 'department']
    search_fields = ['user__username', 'user__email', 'department', 'msnv']
    fieldsets = [
        ('Th√¥ng tin c∆° b·∫£n', {
            'fields': ['user', 'msnv', 'role', 'department', 'phone', 'avatar', 'bio']
        }),
        ('Th√¥ng tin chuy√™n m√¥n', {
            'fields': ['position', 'certificates', 'skills', 'current_project', 'project_position']
        }),
        ('Th√¥ng tin li√™n h·ªá kh·∫©n c·∫•p', {
            'fields': ['emergency_contact', 'emergency_phone', 'join_date']
        }),
        ('Quy·ªÅn h·∫°n b√†i vi·∫øt', {
            'fields': ['can_create_posts', 'can_edit_all_posts', 'can_delete_posts', 'can_publish_posts']
        }),
        ('Quy·ªÅn h·∫°n kh√≥a h·ªçc', {
            'fields': ['can_create_courses', 'can_edit_all_courses', 'can_delete_courses']
        }),
        ('Quy·ªÅn h·∫°n h·ªá th·ªëng', {
            'fields': ['can_manage_users', 'can_view_analytics', 'can_manage_settings']
        }),
    ]

@admin.register(ChatSettings)
class ChatSettingsAdmin(admin.ModelAdmin):
    fieldsets = [
        ('C√†i ƒë·∫∑t chung', {
            'fields': ['is_chat_enabled', 'auto_reply_message', 'zalo_phone']
        }),
    ]
    
    def has_add_permission(self, request):
        return not ChatSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        return False

# ========== DOCUMENT MANAGEMENT ADMIN ==========

@admin.register(DocumentCategory)
class DocumentCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'parent', 'order', 'is_active')
    list_filter = ('parent', 'is_active')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    ordering = ('order', 'name')
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('parent')

@admin.register(DocumentTag)
class DocumentTagAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'color')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}
    ordering = ('name',)

@admin.register(Document)
class DocumentAdmin(admin.ModelAdmin):
    list_display = ['title', 'category', 'version', 'created_by', 'created_at', 'updated_at', 'is_active']
    list_filter = ['category', 'created_at', 'is_active', 'tags']
    search_fields = ['title', 'description']
    readonly_fields = ['created_at', 'updated_at', 'version', 'file_size', 'file_hash']
    filter_horizontal = ['tags']
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('title', 'file', 'description', 'category')
        }),
        ('Metadata', {
            'fields': ('tags', 'version', 'parent_document', 'is_active')
        }),
        ('File Information', {
            'fields': ('file_size', 'file_hash'),
            'classes': ('collapse',)
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category', 'created_by', 'parent_document').prefetch_related('tags')

@admin.register(DocumentVersion)
class DocumentVersionAdmin(admin.ModelAdmin):
    list_display = ('document', 'version', 'created_by', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('document__title', 'version', 'change_log')
    readonly_fields = ('created_at',)
    
    def save_model(self, request, obj, form, change):
        if not change:
            obj.created_by = request.user
        super().save_model(request, obj, form, change)

@admin.register(DocumentAccess)
class DocumentAccessAdmin(admin.ModelAdmin):
    list_display = ('user', 'document', 'action', 'ip_address', 'accessed_at')
    list_filter = ('action', 'accessed_at')
    search_fields = ('user__username', 'document__title', 'ip_address')
    readonly_fields = ('accessed_at',)
    date_hierarchy = 'accessed_at'
    
    def has_add_permission(self, request):
        return False  # Ch·ªâ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ code
    
    def has_change_permission(self, request, obj=None):
        return False  # Kh√¥ng cho ph√©p ch·ªânh s·ª≠a log

@admin.register(ChatMessage)
class ChatMessageAdmin(admin.ModelAdmin):
    list_display = ('sender_name', 'sender_type', 'content', 'created_at', 'is_read')
    list_filter = ('sender_type', 'is_read', 'created_at')
    search_fields = ('sender_name', 'sender_email', 'content')
    readonly_fields = ('created_at',)
    ordering = ('-created_at',)

@admin.register(HomePageSettings)
class HomePageSettingsAdmin(admin.ModelAdmin):
    fieldsets = [
        ('üè† Hero Section', {
            'fields': ['hero_title', 'hero_subtitle', 'hero_bg_image', 'hero_bg_color', 
                      'hero_btn_primary_text', 'hero_btn_primary_url', 
                      'hero_btn_secondary_text', 'hero_btn_secondary_url'],
            'classes': ['wide']
        }),
        ('üî¨ Ph∆∞∆°ng ph√°p NDT', {
            'fields': ['show_ndt_section', 'ndt_section_title', 'ndt_section_subtitle', 
                      'ndt_bg_image', 'ndt_bg_color', 'ndt_overlay_opacity'],
            'classes': ['collapse'],
            'description': 'H√¨nh n·ªÅn s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng. Overlay opacity t·ª´ 0.0 (trong su·ªët) ƒë·∫øn 1.0 (ho√†n to√†n m·ªù).'
        }),
        ('üè¢ D·ª± √°n n·ªïi b·∫≠t', {
            'fields': ['show_projects_section', 'projects_section_title', 'projects_section_subtitle', 'projects_bg_color'],
            'classes': ['collapse']
        }),
        ('üì∞ Blog/Tin t·ª©c', {
            'fields': ['show_blog_section', 'blog_section_title', 'blog_section_subtitle', 'blog_bg_color'],
            'classes': ['collapse']
        }),
        ('üõ†Ô∏è D·ªãch v·ª•', {
            'fields': ['show_services_section', 'services_section_title', 'services_section_subtitle', 'services_bg_color'],
            'classes': ['collapse']
        }),
        ('üí¨ Kh√°ch h√†ng testimonials', {
            'fields': ['show_testimonials_section', 'testimonials_section_title', 'testimonials_section_subtitle', 
                      'testimonials_bg_image', 'testimonials_bg_color', 'testimonials_overlay_opacity'],
            'classes': ['collapse'],
            'description': 'H√¨nh n·ªÅn s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n s·ª≠ d·ª•ng. Overlay opacity ƒë·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªô m·ªù c·ªßa l·ªõp ph·ªß.'
        }),
        ('üí¨ Qu·∫£n l√Ω n·ªôi dung Testimonials', {
            'fields': [
                ('testimonial1_content',),
                ('testimonial1_name', 'testimonial1_position', 'testimonial1_company'),
                ('testimonial1_avatar',),
                ('testimonial2_content',),
                ('testimonial2_name', 'testimonial2_position', 'testimonial2_company'),
                ('testimonial2_avatar',),
                ('testimonial3_content',),
                ('testimonial3_name', 'testimonial3_position', 'testimonial3_company'),
                ('testimonial3_avatar',),
                ('testimonial4_content',),
                ('testimonial4_name', 'testimonial4_position', 'testimonial4_company'),
                ('testimonial4_avatar',),
                ('testimonial5_content',),
                ('testimonial5_name', 'testimonial5_position', 'testimonial5_company'),
                ('testimonial5_avatar',),
            ],
            'classes': ['collapse'],
            'description': 'Qu·∫£n l√Ω n·ªôi dung, t√™n, ch·ª©c v·ª•, c√¥ng ty v√† ·∫£nh ƒë·∫°i di·ªán c·ªßa 5 testimonials.'
        }),
        ('ü§ù ƒê·ªëi t√°c', {
            'fields': ['show_partners_section', 'partners_section_title', 'partners_section_subtitle', 
                      'partners_bg_image', 'partners_bg_color', 'partners_overlay_opacity'],
            'classes': ['collapse'],
            'description': 'H√¨nh n·ªÅn section v√† overlay opacity.'
        }),
        ('üè¢ Qu·∫£n l√Ω Logo ƒê·ªëi t√°c', {
            'fields': [
                ('partner1_name', 'partner1_logo', 'partner1_icon'),
                ('partner2_name', 'partner2_logo', 'partner2_icon'),
                ('partner3_name', 'partner3_logo', 'partner3_icon'),
                ('partner4_name', 'partner4_logo', 'partner4_icon'),
                ('partner5_name', 'partner5_logo', 'partner5_icon'),
                ('partner6_name', 'partner6_logo', 'partner6_icon'),
                ('partner7_name', 'partner7_logo', 'partner7_icon'),
                ('partner8_name', 'partner8_logo', 'partner8_icon'),
                ('partner9_name', 'partner9_logo', 'partner9_icon'),
                ('partner10_name', 'partner10_logo', 'partner10_icon'),
                ('partner11_name', 'partner11_logo', 'partner11_icon'),
                ('partner12_name', 'partner12_logo', 'partner12_icon'),
            ],
            'classes': ['collapse'],
            'description': 'Qu·∫£n l√Ω t√™n v√† logo c·ªßa 12 ƒë·ªëi t√°c. Icon s·∫Ω hi·ªÉn th·ªã khi kh√¥ng c√≥ logo.'
        }),
        ('üìä S·ªë li·ªáu tin c·∫≠y (Trust Indicators)', {
            'fields': ['trust_stat1_number', 'trust_stat1_label', 'trust_stat2_number', 'trust_stat2_label',
                      'trust_stat3_number', 'trust_stat3_label', 'trust_stat4_number', 'trust_stat4_label'],
            'classes': ['collapse']
        }),
        ('‚≠ê V√¨ sao ch·ªçn ch√∫ng t√¥i', {
            'fields': ['show_why_section', 'why_section_title', 'why_section_subtitle', 'why_bg_color'],
            'classes': ['collapse']
        }),
        ('üèÜ T√≠nh nƒÉng n·ªïi b·∫≠t', {
            'fields': ['feature1_title', 'feature1_description', 'feature1_icon',
                      'feature2_title', 'feature2_description', 'feature2_icon',
                      'feature3_title', 'feature3_description', 'feature3_icon',
                      'feature4_title', 'feature4_description', 'feature4_icon'],
            'classes': ['collapse']
        }),
        ('üîç SEO Settings', {
            'fields': ['meta_title', 'meta_description', 'meta_keywords'],
            'classes': ['collapse']
        }),
        ('‚öôÔ∏è Th√¥ng tin h·ªá th·ªëng', {
            'fields': ['updated_by', 'created_at', 'updated_at'],
            'classes': ['collapse']
        })
    ]
    
    readonly_fields = ('created_at', 'updated_at')
    
    def has_add_permission(self, request):
        # Ch·ªâ cho ph√©p t·∫°o n·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o
        return not HomePageSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # Kh√¥ng cho ph√©p x√≥a c·∫•u h√¨nh trang ch·ªß
        return False
    
    def save_model(self, request, obj, form, change):
        # T·ª± ƒë·ªông ghi nh·∫≠n ng∆∞·ªùi c·∫≠p nh·∫≠t
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)
    
    class Meta:
        verbose_name = 'C·∫•u h√¨nh trang ch·ªß'
        verbose_name_plural = 'C·∫•u h√¨nh trang ch·ªß'


@admin.register(AboutPage)
class AboutPageAdmin(admin.ModelAdmin):
    def has_add_permission(self, request):
        # Ch·ªâ cho ph√©p t·∫°o n·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o
        return not AboutPage.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        # Kh√¥ng cho ph√©p x√≥a trang gi·ªõi thi·ªáu
        return False
    
    fieldsets = [
        ('C√†i ƒë·∫∑t SEO', {
            'fields': ['meta_title', 'meta_description'],
            'classes': ['collapse']
        }),
        ('Header & Hero Section', {
            'fields': [
                'title', 'subtitle', 
                'hero_bg_image', 'hero_bg_color', 'hero_text_color'
            ]
        }),
        ('N·ªôi dung ch√≠nh', {
            'fields': [
                'main_title', 'main_content', 'main_image', 'main_bg_color'
            ]
        }),
        ('Ph·∫ßn th·ªëng k√™', {
            'fields': [
                'stats_title', 'stats_bg_color', 'stats_text_color',
                ('stat1_number', 'stat1_label', 'stat1_icon'),
                ('stat2_number', 'stat2_label', 'stat2_icon'),
                ('stat3_number', 'stat3_label', 'stat3_icon'),
                ('stat4_number', 'stat4_label', 'stat4_icon'),
            ]
        }),
        ('T·∫ßm nh√¨n - S·ª© m·ªánh - Gi√° tr·ªã', {
            'fields': [
                'vmv_title', 'vmv_bg_color', 'vmv_bg_image',
                ('vision_title', 'vision_icon', 'vision_color'),
                'vision',
                ('mission_title', 'mission_icon', 'mission_color'),
                'mission',
                ('values_title', 'values_icon', 'values_color'),
                'core_values',
            ]
        }),
        ('Ph·∫ßn Timeline/C·ªôt m·ªëc', {
            'fields': [
                'timeline_section_title', 'timeline_section_subtitle',
                'timeline_bg_image', 'timeline_bg_color', 'timeline_text_color', 'timeline_accent_color',
                ('timeline_overlay_color', 'timeline_overlay_opacity'),
                'timeline'
            ],
            'description': 'Overlay ch·ªâ √°p d·ª•ng khi c√≥ ·∫£nh n·ªÅn Timeline. ƒê·ªô m·ªù t·ª´ 0.0 (trong su·ªët) ƒë·∫øn 1.0 (ho√†n to√†n m·ªù).'
        }),
        ('Ph·∫ßn ƒë·ªôi ng≈©', {
            'fields': [
                'team_section_title', 'team_section_description',
                'team_bg_color', 'team_bg_image'
            ]
        }),
        ('Ph·∫ßn d·ªãch v·ª•', {
            'fields': [
                'services_title', 'services_subtitle', 'services_bg_color', 'services_content'
            ]
        }),
        ('Ph·∫ßn th√†nh t·ª±u', {
            'fields': [
                'achievements_title', 'achievements', 'achievements_bg_color', 'achievements_image'
            ]
        }),
        ('Ph·∫ßn ch·ª©ng ch·ªâ', {
            'fields': [
                'certificates_section_title', 'certificates_section_subtitle',
                'certificates_bg_color', 'certificates'
            ]
        }),
        ('Call to Action', {
            'fields': [
                'cta_title', 'cta_subtitle',
                'cta_button_text', 'cta_button_url',
                'cta_bg_color', 'cta_text_color', 'cta_button_color', 'cta_button_text_color'
            ]
        }),
        ('C√†i ƒë·∫∑t Layout & Typography', {
            'fields': [
                'container_max_width', 'section_padding',
                'heading_font_family', 'body_font_family',
                'heading_color', 'body_color'
            ],
            'classes': ['collapse']
        }),
        ('T∆∞∆°ng th√≠ch c≈©', {
            'fields': ['banner_image', 'content'],
            'classes': ['collapse'],
            'description': 'C√°c tr∆∞·ªùng n√†y ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi template c≈©. Khuy·∫øn kh√≠ch s·ª≠ d·ª•ng c√°c tr∆∞·ªùng m·ªõi ·ªü tr√™n.'
        })
    ]
    
    class Media:
        css = {
            'all': ('admin/css/about_page_admin.css',)
        }
        js = ('admin/js/about_page_admin.js',)

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = ('name', 'code', 'company', 'status', 'project_manager', 'created_at')
    list_filter = ('status', 'created_at', 'methods')
    search_fields = ('name', 'code', 'description')
    date_hierarchy = 'created_at'
    filter_horizontal = ('methods', 'equipment', 'staff')
    readonly_fields = ('created_at', 'updated_at')
    
    fieldsets = [
        ('Th√¥ng tin c∆° b·∫£n', {
            'fields': ['name', 'code', 'company', 'project_manager']
        }),
        ('Chi ti·∫øt d·ª± √°n', {
            'fields': ['description', 'location', 'start_date', 'end_date', 'status', 'contract_value']
        }),
        ('Ph√¢n c√¥ng', {
            'fields': ['methods', 'equipment', 'staff']
        }),
        ('Th·ªëng k√™', {
            'fields': ['created_at', 'updated_at'],
            'classes': ['collapse']
        }),
    ]
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('company', 'project_manager')

@admin.register(PublicProject)
class PublicProjectAdmin(admin.ModelAdmin):
    list_display = ('title', 'client_name', 'project_type', 'status', 'is_featured', 'published', 'view_count', 'created_at')
    list_filter = ('status', 'is_featured', 'published', 'project_type', 'created_at')
    search_fields = ('title', 'summary', 'content', 'client_name', 'tags')
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_at'
    readonly_fields = ('view_count', 'created_at', 'updated_at')
    
    fieldsets = [
        ('Th√¥ng tin c∆° b·∫£n', {
            'fields': ['title', 'slug', 'featured_image', 'author']
        }),
        ('N·ªôi dung', {
            'fields': ['summary', 'content']
        }),
        ('Th√¥ng tin d·ª± √°n', {
            'fields': ['client_name', 'location', 'project_type', 'completion_date', 'project_value', 'tags']
        }),
        ('Tr·∫°ng th√°i', {
            'fields': ['status', 'is_featured', 'published']
        }),
        ('SEO', {
            'fields': ['meta_title', 'meta_description'],
            'classes': ['collapse']
        }),
        ('Th·ªëng k√™', {
            'fields': ['view_count', 'created_at', 'updated_at'],
            'classes': ['collapse']
        }),
    ]
    
    def save_model(self, request, obj, form, change):
        if not change:  # N·∫øu t·∫°o m·ªõi
            obj.author = request.user
        super().save_model(request, obj, form, change)
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('author')
