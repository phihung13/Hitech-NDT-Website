from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QTableWidget, QTableWidgetItem, QHeaderView, QGroupBox, QHBoxLayout, QSizePolicy, QFrame, QPushButton, QScrollArea
from PyQt5.QtGui import QFont, QColor, QIcon
from PyQt5.QtCore import Qt
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import numpy as np
from data_manager import DataManager
import json
import os

class TabTongLuong(QWidget):
    def __init__(self, data_chamcong=None, phieu_luong_tab=None):
        super().__init__()
        self.data_chamcong = data_chamcong if data_chamcong is not None else {}
        self.phieu_luong_tab = phieu_luong_tab  # Reference ƒë·∫øn tab phi·∫øu l∆∞∆°ng
        self.data_manager = DataManager()
        
        # D·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø t·ª´ phi·∫øu l∆∞∆°ng
        self.salary_data_file = "data/salary_data.json"
        self.salary_data = self.load_salary_data()
        
        self.init_ui()

    def init_ui(self):
        # Layout ch√≠nh
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # Ti√™u ƒë·ªÅ n·ªïi b·∫≠t (c·ªë ƒë·ªãnh ·ªü tr√™n)
        title = QLabel("T·ªîNG CHI PH√ç TI·ªÄN L∆Ø∆†NG TH√ÅNG 08.2025")
        title.setFont(QFont("Times New Roman", 22, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #007bff; margin-bottom: 10px; padding: 10px; background: white; border-radius: 8px;")
        main_layout.addWidget(title)

        # T·∫°o Scroll Area
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                background: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #c0c0c0;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #a0a0a0;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            QScrollBar:horizontal {
                background: #f0f0f0;
                height: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:horizontal {
                background: #c0c0c0;
                border-radius: 6px;
                min-width: 20px;
            }
            QScrollBar::handle:horizontal:hover {
                background: #a0a0a0;
            }
            QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal {
                width: 0px;
            }
        """)

        # Widget ch·ª©a n·ªôi dung c√≥ th·ªÉ cu·ªôn
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        scroll_layout.setSpacing(18)
        scroll_layout.setContentsMargins(20, 20, 20, 20)

        # Th√¥ng b√°o tr·∫°ng th√°i
        self.status_label = QLabel("üìã Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø. Vui l√≤ng t√≠nh to√°n l∆∞∆°ng trong tab Phi·∫øu l∆∞∆°ng tr∆∞·ªõc.")
        self.status_label.setFont(QFont("Times New Roman", 12))
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #6c757d; padding: 10px; background: #f8f9fa; border-radius: 8px;")
        scroll_layout.addWidget(self.status_label)



        # B·∫£ng t·ªïng h·ª£p l∆∞∆°ng
        group = QGroupBox()
        group.setStyleSheet("""
            QGroupBox {
                border: none;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #f8f9fa, stop:1 #e3f2fd);
                border-radius: 12px;
                margin-top: 10px;
            }
        """)
        group_layout = QVBoxLayout(group)
        
        self.table = QTableWidget()
        self.table.setFont(QFont("Times New Roman", 12))
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["S·ªê TT", "NH√ÇN VI√äN", "MSNV", "TI·ªÄN L∆Ø∆†NG/TH√ÅNG (VNƒê)", "TR·∫†NG TH√ÅI"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        # Thi·∫øt l·∫≠p chi·ªÅu cao h√†ng v√† header
        self.table.verticalHeader().setDefaultSectionSize(40)  # Chi·ªÅu cao m·ªói h√†ng
        self.table.verticalHeader().setVisible(False)  # ·∫®n s·ªë th·ª© t·ª± h√†ng
        header_height = 50  # Chi·ªÅu cao header
        self.table.horizontalHeader().setFixedHeight(header_height)
        self.table.setStyleSheet("""
            QTableWidget {
                background: transparent;
                border: none;
                font-size: 15px;
            }
            QHeaderView::section {
                background: #7fff00;
                color: #222;
                font-size: 15px;
                border-radius: 0px;
                padding: 10px 0px;
                font-weight: bold;
            }
            QTableWidget::item {
                background: transparent;
                border: none;
                padding: 8px 0px;
            }
        """)
        group_layout.addWidget(self.table)
        
        # D√≤ng t·ªïng chi
        self.tong_chi_label = QLabel()
        self.tong_chi_label.setFont(QFont("Times New Roman", 14, QFont.Bold))
        self.tong_chi_label.setAlignment(Qt.AlignRight)
        self.tong_chi_label.setStyleSheet("color: #e83e8c; padding: 8px 12px;")
        group_layout.addWidget(self.tong_chi_label)
        scroll_layout.addWidget(group)

        # Th·ªëng k√™ t·ªïng h·ª£p
        summary_group = QGroupBox("üìà Th·ªëng k√™ t·ªïng h·ª£p")
        summary_group.setStyleSheet("""
            QGroupBox {
                border: 2px solid #ffc107;
                border-radius: 8px;
                background: white;
                font-weight: bold;
                color: #856404;
            }
        """)
        summary_layout = QHBoxLayout(summary_group)
        
        self.summary_labels = {}
        summary_items = [
            ("T·ªïng nh√¢n vi√™n", "0"),
            ("T·ªïng l∆∞∆°ng c∆° b·∫£n", "0 VNƒê"),
            ("T·ªïng ph·ª• c·∫•p", "0 VNƒê"),
            ("T·ªïng th√™m gi·ªù", "0 VNƒê"),
            ("T·ªïng KPI", "0 VNƒê"),
            ("T·ªïng th·ª±c nh·∫≠n", "0 VNƒê")
        ]
        
        for label_text, value_text in summary_items:
            item_frame = QFrame()
            item_frame.setStyleSheet("border: 1px solid #dee2e6; border-radius: 6px; padding: 8px;")
            item_layout = QVBoxLayout(item_frame)
            
            label = QLabel(label_text)
            label.setFont(QFont("Times New Roman", 10))
            label.setAlignment(Qt.AlignCenter)
            label.setStyleSheet("color: #6c757d;")
            
            value = QLabel(value_text)
            value.setFont(QFont("Times New Roman", 12, QFont.Bold))
            value.setAlignment(Qt.AlignCenter)
            value.setStyleSheet("color: #007bff;")
            
            item_layout.addWidget(label)
            item_layout.addWidget(value)
            summary_layout.addWidget(item_frame)
            
            self.summary_labels[label_text] = value
        
        scroll_layout.addWidget(summary_group)

        # Bi·ªÉu ƒë·ªì c·ªôt - H√†ng ri√™ng, full width
        bar_group = QGroupBox("üìä Bi·ªÉu ƒë·ªì c·ªôt l∆∞∆°ng nh√¢n vi√™n")
        bar_group.setStyleSheet("""
            QGroupBox {
                border: 2px solid #007bff;
                border-radius: 12px;
                background: white;
                font-weight: bold;
                color: #007bff;
                margin-top: 10px;
                padding: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
                font-size: 14px;
            }
        """)
        bar_layout = QVBoxLayout(bar_group)
        bar_layout.setContentsMargins(10, 20, 10, 10)
        bar_layout.setSpacing(10)
        
        self.bar_canvas = FigureCanvas(plt.Figure(figsize=(12, 7)))
        self.bar_canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.bar_canvas.setMinimumHeight(500)
        bar_layout.addWidget(self.bar_canvas)
        
        scroll_layout.addWidget(bar_group)

        # Bi·ªÉu ƒë·ªì tr√≤n - H√†ng ri√™ng, full width
        pie_group = QGroupBox("ü•ß Ph√¢n b·ªï chi ph√≠ l∆∞∆°ng")
        pie_group.setStyleSheet("""
            QGroupBox {
                border: 2px solid #28a745;
                border-radius: 12px;
                background: white;
                font-weight: bold;
                color: #28a745;
                margin-top: 10px;
                padding: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
                font-size: 14px;
            }
        """)
        pie_layout = QVBoxLayout(pie_group)
        pie_layout.setContentsMargins(10, 20, 10, 10)
        pie_layout.setSpacing(10)
        
        self.pie_canvas = FigureCanvas(plt.Figure(figsize=(12, 6)))
        self.pie_canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.pie_canvas.setMinimumHeight(400)
        pie_layout.addWidget(self.pie_canvas)
        
        scroll_layout.addWidget(pie_group)
        
        # Th√™m scroll content v√†o scroll area
        scroll_area.setWidget(scroll_content)
        
        # Th√™m scroll area v√†o main layout
        main_layout.addWidget(scroll_area)

        # Panel n√∫t thao t√°c
        action_panel = QHBoxLayout()
        action_panel.setSpacing(10)
        action_panel.setContentsMargins(0, 10, 0, 0)
        
        # N√∫t x√≥a h·∫øt d·ªØ li·ªáu
        self.btn_xoa_du_lieu = QPushButton("üóëÔ∏è X√≥a h·∫øt d·ªØ li·ªáu")
        self.btn_xoa_du_lieu.setFont(QFont("Times New Roman", 12, QFont.Bold))
        self.btn_xoa_du_lieu.setStyleSheet("""
            QPushButton {
                background: linear-gradient(135deg, #dc3545, #c82333);
                color: black;
                border: none;
                border-radius: 8px;
                padding: 12px 24px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: linear-gradient(135deg, #c82333, #bd2130);
                transform: translateY(-2px);
            }
            QPushButton:pressed {
                background: linear-gradient(135deg, #bd2130, #a71e2a);
            }
        """)
        self.btn_xoa_du_lieu.clicked.connect(self.xoa_het_du_lieu)

        delete_box = QVBoxLayout()
        delete_box.setSpacing(4)
        delete_box.setAlignment(Qt.AlignHCenter)
        delete_box.addWidget(self.btn_xoa_du_lieu)

        red_bar = QWidget()
        red_bar.setFixedHeight(15)
        red_bar.setStyleSheet("background-color: #dc3545; border-radius: 3px;")
        delete_box.addWidget(red_bar)

        action_panel.addLayout(delete_box)
        
        # Th√™m spacing ƒë·ªÉ cƒÉn ph·∫£i
        action_panel.addStretch()
        
        main_layout.addLayout(action_panel)
        
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu ban ƒë·∫ßu
        self.update_display()

    def load_salary_data(self):
        """T·∫£i d·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø t·ª´ file"""
        try:
            if os.path.exists(self.salary_data_file):
                with open(self.salary_data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            print(f"L·ªói t·∫£i d·ªØ li·ªáu l∆∞∆°ng: {e}")
            return {}

    def save_salary_data(self):
        """L∆∞u d·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø v√†o file"""
        try:
            os.makedirs(os.path.dirname(self.salary_data_file), exist_ok=True)
            with open(self.salary_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.salary_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u d·ªØ li·ªáu l∆∞∆°ng: {e}")

    def add_salary_data(self, employee_name, salary_info):
        """Th√™m d·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø cho m·ªôt nh√¢n vi√™n"""
        print(f"=== TH√äM D·ªÆ LI·ªÜU L∆Ø∆†NG CHO {employee_name} ===")
        print(f"Debug: salary_info = {salary_info}")
        self.salary_data[employee_name] = salary_info
        self.save_salary_data()
        self.update_display()

    def xoa_het_du_lieu(self):
        """X√≥a h·∫øt d·ªØ li·ªáu l∆∞∆°ng"""
        try:
            # X√≥a d·ªØ li·ªáu trong memory
            self.salary_data = {}
            
            # X√≥a file d·ªØ li·ªáu
            if os.path.exists(self.salary_data_file):
                os.remove(self.salary_data_file)
                print(f"ƒê√£ x√≥a file: {self.salary_data_file}")
            
            # C·∫≠p nh·∫≠t giao di·ªán
            self.update_display()
            
            # C·∫≠p nh·∫≠t th√¥ng b√°o tr·∫°ng th√°i
            self.status_label.setText("üóëÔ∏è ƒê√£ x√≥a h·∫øt d·ªØ li·ªáu l∆∞∆°ng")
            self.status_label.setStyleSheet("color: #dc3545; padding: 10px; background: #f8d7da; border-radius: 8px;")
            
            print("=== ƒê√É X√ìA H·∫æT D·ªÆ LI·ªÜU L∆Ø∆†NG ===")
            
        except Exception as e:
            print(f"L·ªói khi x√≥a d·ªØ li·ªáu: {e}")

    def refresh_data(self):
        """L√†m m·ªõi d·ªØ li·ªáu t·ª´ file"""
        self.salary_data = self.load_salary_data()
        self.update_display()
        
        if self.salary_data:
            self.status_label.setText(f"‚úÖ ƒê√£ t·∫£i {len(self.salary_data)} b·∫£n ghi l∆∞∆°ng th·ª±c t·∫ø")
            self.status_label.setStyleSheet("color: #28a745; padding: 10px; background: #d4edda; border-radius: 8px;")
        else:
            self.status_label.setText("üìã Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞∆°ng th·ª±c t·∫ø. Vui l√≤ng t√≠nh to√°n l∆∞∆°ng trong tab Phi·∫øu l∆∞∆°ng tr∆∞·ªõc.")
            self.status_label.setStyleSheet("color: #6c757d; padding: 10px; background: #f8f9fa; border-radius: 8px;")

    def update_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã b·∫£ng v√† bi·ªÉu ƒë·ªì"""
        print("=== C·∫¨P NH·∫¨T HI·ªÇN TH·ªä T·ªîNG L∆Ø∆†NG ===")
        print(f"Debug: salary_data = {self.salary_data}")
        if not self.salary_data:
            print("Debug: Kh√¥ng c√≥ d·ªØ li·ªáu l∆∞∆°ng")
            self.table.setRowCount(0)
            self.tong_chi_label.setText("<b>T·ªîNG CHI (VNƒê):</b> <span style='color:red; font-weight:bold;'>0</span>")
            self.update_empty_charts()
            self.update_empty_summary()
            return

        # C·∫≠p nh·∫≠t b·∫£ng
        employees = list(self.salary_data.keys())
        self.table.setRowCount(len(employees))
        
        # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao b·∫£ng d·ª±a tr√™n s·ªë l∆∞·ª£ng nh√¢n vi√™n
        self.adjust_table_height(len(employees))
        
        total_thuc_nhan = 0
        total_luong_co_ban = 0
        total_phu_cap = 0
        total_them_gio = 0
        total_kpi = 0
        
        bar_names = []
        bar_values = []
        pie_values = [0, 0, 0, 0, 0, 0, 0, 0]  # L∆∞∆°ng c∆° b·∫£n, Ph·ª• c·∫•p, Th√™m gi·ªù, KPI, B·∫£o hi·ªÉm, Thu·∫ø TNCN, T·∫°m ·ª©ng/Vi ph·∫°m, Th·ª±c nh·∫≠n
        
        for row, emp in enumerate(employees):
            salary_info = self.salary_data[emp]
            
            # L·∫•y d·ªØ li·ªáu
            msnv = salary_info.get('msnv', '')
            thuc_nhan = salary_info.get('thuc_nhan', 0)
            luong_co_ban = salary_info.get('luong_co_ban', 0)
            tong_phu_cap = salary_info.get('tong_phu_cap', 0)
            tong_them_gio = salary_info.get('tong_them_gio', 0)
            tong_kpi = salary_info.get('tong_kpi', 0)
            bao_hiem = salary_info.get('bao_hiem', 0)
            thue_tncn = salary_info.get('thue_tncn', 0)
            tam_ung = salary_info.get('tam_ung', 0)
            vi_pham = salary_info.get('vi_pham', 0)
            
            # C·∫≠p nh·∫≠t t·ªïng
            total_thuc_nhan += thuc_nhan
            total_luong_co_ban += luong_co_ban
            total_phu_cap += tong_phu_cap
            total_them_gio += tong_them_gio
            total_kpi += tong_kpi
            
            # S·ªë TT
            item_stt = QTableWidgetItem(str(row+1))
            item_stt.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row, 0, item_stt)
            
            # Nh√¢n vi√™n
            item_name = QTableWidgetItem(emp)
            item_name.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.table.setItem(row, 1, item_name)
            
            # MSNV
            item_msnv = QTableWidgetItem(msnv)
            item_msnv.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row, 2, item_msnv)
            
            # Ti·ªÅn l∆∞∆°ng/th√°ng
            item_luong = QTableWidgetItem(f"{thuc_nhan:,.0f}")
            item_luong.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(row, 3, item_luong)
            
            # Tr·∫°ng th√°i
            status = "‚úÖ ƒê√£ t√≠nh to√°n"
            item_status = QTableWidgetItem(status)
            item_status.setTextAlignment(Qt.AlignCenter)
            item_status.setForeground(QColor("#28a745"))
            self.table.setItem(row, 4, item_status)
            
            # D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
            bar_names.append(emp)
            bar_values.append(thuc_nhan)
            
            # C·∫≠p nh·∫≠t d·ªØ li·ªáu bi·ªÉu ƒë·ªì tr√≤n
            pie_values[0] += luong_co_ban
            pie_values[1] += tong_phu_cap
            pie_values[2] += tong_them_gio
            pie_values[3] += tong_kpi
            pie_values[4] += bao_hiem
            pie_values[5] += thue_tncn
            pie_values[6] += tam_ung + vi_pham
            pie_values[7] += thuc_nhan

        # C·∫≠p nh·∫≠t t·ªïng chi
        self.tong_chi_label.setText(f"<b>T·ªîNG CHI (VNƒê):</b> <span style='color:red; font-weight:bold;'>{total_thuc_nhan:,.0f}</span>")
        
        # C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
        self.update_bar_chart(bar_names, bar_values)
        self.update_pie_chart(pie_values)
        
        # C·∫≠p nh·∫≠t th·ªëng k√™
        self.update_summary(len(employees), total_luong_co_ban, total_phu_cap, total_them_gio, total_kpi, total_thuc_nhan)

    def update_empty_charts(self):
        """C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì khi kh√¥ng c√≥ d·ªØ li·ªáu"""
        # Bi·ªÉu ƒë·ªì c·ªôt tr·ªëng
        self.bar_canvas.figure.clear()
        ax = self.bar_canvas.figure.add_subplot(111)
        ax.text(0.5, 0.5, 'Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞∆°ng\nVui l√≤ng t√≠nh to√°n l∆∞∆°ng trong tab Phi·∫øu l∆∞∆°ng', 
               ha='center', va='center', transform=ax.transAxes, 
               fontsize=16, fontweight='bold', color='#7f8c8d',
               bbox=dict(boxstyle="round,pad=0.3", facecolor='#ecf0f1', alpha=0.8))
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        self.bar_canvas.figure.patch.set_facecolor('#f8f9fa')
        self.bar_canvas.draw()
        
        # Bi·ªÉu ƒë·ªì tr√≤n tr·ªëng
        self.pie_canvas.figure.clear()
        ax = self.pie_canvas.figure.add_subplot(111)
        ax.text(0.5, 0.5, 'Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞∆°ng\nVui l√≤ng t√≠nh to√°n l∆∞∆°ng trong tab Phi·∫øu l∆∞∆°ng', 
               ha='center', va='center', transform=ax.transAxes, 
               fontsize=16, fontweight='bold', color='#7f8c8d',
               bbox=dict(boxstyle="round,pad=0.3", facecolor='#ecf0f1', alpha=0.8))
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        self.pie_canvas.figure.patch.set_facecolor('#f8f9fa')
        self.pie_canvas.draw()

    def update_bar_chart(self, names, values):
        """C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì c·ªôt"""
        print(f"=== C·∫¨P NH·∫¨T BI·ªÇU ƒê·ªí C·ªòT ===")
        print(f"Debug: names = {names}")
        print(f"Debug: values = {values}")
        self.bar_canvas.figure.clear()
        ax = self.bar_canvas.figure.add_subplot(111)
        
        # T·∫°o m√†u gradient ƒë·∫πp
        colors = plt.cm.viridis(np.linspace(0, 1, len(names)))
        bars = ax.bar(range(len(names)), values, color=colors, alpha=0.8, edgecolor='white', linewidth=2)
        
        # Th√™m kho·∫£ng tr·ªëng ph√≠a tr√™n ƒë·ªÉ tr√°nh ƒë√® ch·ªØ
        if len(values) > 0:
            ymax = max(values)
            ax.set_ylim(0, ymax * 1.2)
        
        # Th√™m gi√° tr·ªã tr√™n c·ªôt v·ªõi format ƒë·∫πp
        for bar, value in zip(bars, values):
            height = bar.get_height()
            if height > 0:
                ax.text(bar.get_x() + bar.get_width()/2., height + max(height*0.03, ymax*0.02),
                       f'{value:,.0f}', ha='center', va='bottom', 
                       fontsize=11, fontweight='bold', color='#2c3e50')
        
        # C·∫£i thi·ªán style
        ax.set_xlabel('Nh√¢n vi√™n', fontsize=14, fontweight='bold', color='#2c3e50')
        ax.set_ylabel('L∆∞∆°ng (VNƒê)', fontsize=14, fontweight='bold', color='#2c3e50')
        ax.set_title('Bi·ªÉu ƒë·ªì l∆∞∆°ng nh√¢n vi√™n', fontsize=16, fontweight='bold', color='#2c3e50', pad=20)
        ax.set_xticks(range(len(names)))
        ax.set_xticklabels(names, rotation=45, ha='right', fontsize=12, fontweight='bold')
        
        # Grid v√† background
        ax.grid(True, alpha=0.3, linestyle='--', color='#bdc3c7')
        ax.set_facecolor('#f8f9fa')
        self.bar_canvas.figure.patch.set_facecolor('#f8f9fa')
        
        # Th√™m border cho bi·ªÉu ƒë·ªì
        for spine in ax.spines.values():
            spine.set_color('#bdc3c7')
            spine.set_linewidth(1.5)
        
        self.bar_canvas.figure.tight_layout()
        self.bar_canvas.draw()

    def update_pie_chart(self, values):
        """C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì tr√≤n"""
        print(f"=== C·∫¨P NH·∫¨T BI·ªÇU ƒê·ªí TR√íN ===")
        print(f"Debug: values = {values}")
        self.pie_canvas.figure.clear()
        ax = self.pie_canvas.figure.add_subplot(111)
        
        labels = ['L∆∞∆°ng c∆° b·∫£n', 'Ph·ª• c·∫•p', 'Th√™m gi·ªù', 'KPI', 'B·∫£o hi·ªÉm', 'Thu·∫ø TNCN', 'T·∫°m ·ª©ng/Vi ph·∫°m', 'Th·ª±c nh·∫≠n']
        colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', '#34495e', '#e67e22', '#1abc9c']
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c ph·∫ßn c√≥ gi√° tr·ªã > 0
        non_zero_values = []
        non_zero_labels = []
        non_zero_colors = []
        
        for i, value in enumerate(values):
            if value > 0:
                non_zero_values.append(value)
                non_zero_labels.append(labels[i])
                non_zero_colors.append(colors[i])
        
        if non_zero_values:
            # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi style ƒë·∫πp
            wedges, texts, autotexts = ax.pie(non_zero_values, labels=non_zero_labels, colors=non_zero_colors, 
                                             autopct='%1.1f%%', startangle=90, 
                                             explode=[0.05] * len(non_zero_values),  # T√°ch c√°c ph·∫ßn
                                             shadow=True,  # Th√™m b√≥ng
                                             textprops={'fontsize': 11, 'fontweight': 'bold'})
            
            # C·∫£i thi·ªán style cho text
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
                autotext.set_fontsize(10)
            
            for text in texts:
                text.set_fontsize(11)
                text.set_fontweight('bold')
                text.set_color('#2c3e50')
            
            ax.set_title('Ph√¢n b·ªï chi ph√≠ l∆∞∆°ng', fontsize=16, fontweight='bold', color='#2c3e50', pad=20)
            
            # Th√™m legend
            ax.legend(wedges, [f'{label}: {value:,.0f} VNƒê' for label, value in zip(non_zero_labels, non_zero_values)],
                     title="Chi ti·∫øt", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1),
                     fontsize=10, title_fontsize=12)
        else:
            ax.text(0.5, 0.5, 'Ch∆∞a c√≥ d·ªØ li·ªáu', ha='center', va='center', transform=ax.transAxes, 
                   fontsize=16, fontweight='bold', color='#7f8c8d')
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.axis('off')
        
        # Background
        self.pie_canvas.figure.patch.set_facecolor('#f8f9fa')
        
        self.pie_canvas.figure.tight_layout()
        self.pie_canvas.draw()

    def update_empty_summary(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™ khi kh√¥ng c√≥ d·ªØ li·ªáu"""
        for label_text in self.summary_labels:
            if "T·ªïng nh√¢n vi√™n" in label_text:
                self.summary_labels[label_text].setText("0")
            else:
                self.summary_labels[label_text].setText("0 VNƒê")

    def update_summary(self, total_employees, total_basic, total_allowance, total_overtime, total_kpi, total_salary):
        """C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng h·ª£p"""
        self.summary_labels["T·ªïng nh√¢n vi√™n"].setText(str(total_employees))
        self.summary_labels["T·ªïng l∆∞∆°ng c∆° b·∫£n"].setText(f"{total_basic:,.0f} VNƒê")
        self.summary_labels["T·ªïng ph·ª• c·∫•p"].setText(f"{total_allowance:,.0f} VNƒê")
        self.summary_labels["T·ªïng th√™m gi·ªù"].setText(f"{total_overtime:,.0f} VNƒê")
        self.summary_labels["T·ªïng KPI"].setText(f"{total_kpi:,.0f} VNƒê")
        self.summary_labels["T·ªïng th·ª±c nh·∫≠n"].setText(f"{total_salary:,.0f} VNƒê")

    def update_data(self, data_chamcong):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu ch·∫•m c√¥ng (kh√¥ng t·ª± ƒë·ªông t√≠nh to√°n)"""
        self.data_chamcong = data_chamcong
        # Kh√¥ng t·ª± ƒë·ªông t√≠nh to√°n g√¨ c·∫£, ch·ªâ c·∫≠p nh·∫≠t hi·ªÉn th·ªã
        self.update_display()

    def adjust_table_height(self, num_employees):
        """T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao b·∫£ng d·ª±a tr√™n s·ªë l∆∞·ª£ng nh√¢n vi√™n"""
        try:
            # Chi·ªÅu cao header
            header_height = 50
            
            # Chi·ªÅu cao m·ªói h√†ng
            row_height = 40
            
            # Chi·ªÅu cao t·ªëi thi·ªÉu (√≠t nh·∫•t 3 h√†ng)
            min_height = header_height + (3 * row_height)
            
            # Chi·ªÅu cao t·ªëi ƒëa (t·ªëi ƒëa 15 h√†ng)
            max_height = header_height + (15 * row_height)
            
            # T√≠nh chi·ªÅu cao d·ª±a tr√™n s·ªë l∆∞·ª£ng nh√¢n vi√™n
            if num_employees == 0:
                calculated_height = min_height
            else:
                calculated_height = header_height + (num_employees * row_height)
                # Gi·ªõi h·∫°n trong kho·∫£ng min-max
                calculated_height = max(min_height, min(calculated_height, max_height))
            
            # √Åp d·ª•ng chi·ªÅu cao cho b·∫£ng
            self.table.setFixedHeight(int(calculated_height))
            
            print(f"Debug: ƒêi·ªÅu ch·ªânh chi·ªÅu cao b·∫£ng - {num_employees} nh√¢n vi√™n, chi·ªÅu cao: {calculated_height}px")
            
        except Exception as e:
            print(f"L·ªói ƒëi·ªÅu ch·ªânh chi·ªÅu cao b·∫£ng: {e}") 