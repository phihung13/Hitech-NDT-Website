import json
import os
from datetime import datetime

class DataManager:
    def __init__(self):
        self.data_dir = "data"
        self.ensure_data_directory()
        
        # ƒê∆∞·ªùng d·∫´n c√°c file d·ªØ li·ªáu (ch·ªâ 2 module c·ªë ƒë·ªãnh)
        self.nhanvien_file = os.path.join(self.data_dir, "nhanvien.json")
        self.quydinh_file = os.path.join(self.data_dir, "quydinh_luong.json")
        self.chamcong_file = os.path.join(self.data_dir, "chamcong_3_nhanvien_08_2025.json")
        
        # File c·∫•u h√¨nh ƒë·ªÉ l∆∞u tr·ªØ file ƒë√£ import
        self.imported_files_config = os.path.join(self.data_dir, "imported_files.json")
        
    def ensure_data_directory(self):
        """T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
    
    def save_imported_file(self, file_type, file_path, file_info=None):
        """L∆∞u th√¥ng tin file ƒë√£ import"""
        try:
            imported_files = self.load_imported_files()
            
            if file_info is None:
                file_info = {
                    "filename": os.path.basename(file_path),
                    "imported_at": datetime.now().isoformat(),
                    "file_size": os.path.getsize(file_path) if os.path.exists(file_path) else 0
                }
            
            imported_files[file_type] = {
                "file_path": file_path,
                "file_info": file_info
            }
            
            self._save_data(self.imported_files_config, imported_files)
            print(f"‚úÖ ƒê√£ l∆∞u file {file_type}: {file_path}")
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file ƒë√£ import: {e}")
    
    def load_imported_files(self):
        """Load danh s√°ch file ƒë√£ import"""
        try:
            data = self._load_data(self.imported_files_config)
            return data if data else {}
        except Exception as e:
            print(f"‚ùå L·ªói load file ƒë√£ import: {e}")
            return {}
    
    def get_imported_file_path(self, file_type):
        """L·∫•y ƒë∆∞·ªùng d·∫´n file ƒë√£ import theo lo·∫°i"""
        try:
            imported_files = self.load_imported_files()
            if file_type in imported_files:
                file_path = imported_files[file_type]["file_path"]
                # Ki·ªÉm tra file c√≤n t·ªìn t·∫°i kh√¥ng
                if os.path.exists(file_path):
                    return file_path
                else:
                    print(f"‚ö†Ô∏è File ƒë√£ import kh√¥ng c√≤n t·ªìn t·∫°i: {file_path}")
                    # X√≥a file kh√¥ng t·ªìn t·∫°i kh·ªèi danh s√°ch
                    self.remove_imported_file(file_type)
            return None
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y file ƒë√£ import: {e}")
            return None
    
    def remove_imported_file(self, file_type):
        """X√≥a file kh·ªèi danh s√°ch ƒë√£ import"""
        try:
            imported_files = self.load_imported_files()
            if file_type in imported_files:
                del imported_files[file_type]
                self._save_data(self.imported_files_config, imported_files)
                print(f"‚úÖ ƒê√£ x√≥a file {file_type} kh·ªèi danh s√°ch ƒë√£ import")
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a file ƒë√£ import: {e}")
    
    def clear_all_imported_files(self):
        """X√≥a t·∫•t c·∫£ file ƒë√£ import"""
        try:
            self._save_data(self.imported_files_config, {})
            print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ file ƒë√£ import")
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a t·∫•t c·∫£ file ƒë√£ import: {e}")
    
    def get_imported_files_info(self):
        """L·∫•y th√¥ng tin t·∫•t c·∫£ file ƒë√£ import"""
        try:
            imported_files = self.load_imported_files()
            info = {}
            for file_type, file_data in imported_files.items():
                file_path = file_data["file_path"]
                file_info = file_data.get("file_info", {})
                info[file_type] = {
                    "file_path": file_path,
                    "filename": file_info.get("filename", os.path.basename(file_path)),
                    "imported_at": file_info.get("imported_at", ""),
                    "file_size": file_info.get("file_size", 0),
                    "exists": os.path.exists(file_path)
                }
            return info
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y th√¥ng tin file ƒë√£ import: {e}")
            return {}
    
    def save_nhanvien(self, ds_nhanvien):
        """L∆∞u danh s√°ch nh√¢n vi√™n"""
        data = {
            "timestamp": datetime.now().isoformat(),
            "total_records": len(ds_nhanvien),
            "data": ds_nhanvien
        }
        self._save_data(self.nhanvien_file, data)
    
    def load_nhanvien(self):
        """T·∫£i danh s√°ch nh√¢n vi√™n"""
        data = self._load_data(self.nhanvien_file)
        if data:
            ds_nhanvien = data.get("data", [])
            # T∆∞∆°ng th√≠ch d·ªØ li·ªáu c≈©: th√™m c·ªôt "Ph√≤ng ban" n·∫øu thi·∫øu
            updated_data = []
            for nv in ds_nhanvien:
                if isinstance(nv, list):
                    if len(nv) == 12:  # D·ªØ li·ªáu c≈© (12 c·ªôt)
                        # Th√™m "Ph√≤ng ban" tr·ªëng ·ªü v·ªã tr√≠ index 7 (sau "Ch·ª©c v·ª•")
                        new_nv = nv[:7] + [""] + nv[7:]
                        updated_data.append(new_nv)
                    elif len(nv) >= 13:  # D·ªØ li·ªáu m·ªõi (13 c·ªôt tr·ªü l√™n)
                        updated_data.append(nv[:13])  # Ch·ªâ l·∫•y 13 c·ªôt ƒë·∫ßu
                    else:
                        # D·ªØ li·ªáu thi·∫øu, b·ªï sung ƒë·∫øn 13 c·ªôt
                        while len(nv) < 13:
                            nv.append("")
                        updated_data.append(nv)
                else:
                    updated_data.append(nv)
            return updated_data
        return []
    
    def save_quydinh_luong(self, ds_luong_nv, ds_phu_cap_ct):
        """L∆∞u quy ƒë·ªãnh l∆∞∆°ng"""
        data = {
            "timestamp": datetime.now().isoformat(),
            "luong_nv": ds_luong_nv,
            "phu_cap_ct": ds_phu_cap_ct
        }
        self._save_data(self.quydinh_file, data)
    
    def load_quydinh_luong(self):
        """T·∫£i quy ƒë·ªãnh l∆∞∆°ng"""
        data = self._load_data(self.quydinh_file)
        if data:
            luong_nv = data.get("luong_nv", [])
            phu_cap_ct = data.get("phu_cap_ct", [])
            
            # Debug: In ra d·ªØ li·ªáu l∆∞∆°ng ƒë·ªÉ ki·ªÉm tra
            print(f"üîç DEBUG - Load quy ƒë·ªãnh l∆∞∆°ng:")
            print(f"   üìÅ File: {self.quydinh_file}")
            print(f"    S·ªë l∆∞·ª£ng b·∫£n ghi l∆∞∆°ng: {len(luong_nv)}")
            
            for i, luong in enumerate(luong_nv):
                if isinstance(luong, list) and len(luong) >= 4:
                    name = luong[1] if len(luong) > 1 else "N/A"
                    salary = luong[3] if len(luong) > 3 else "N/A"
                    print(f"   üë§ {i}: {name} - L∆∞∆°ng: {salary}")
            
            return luong_nv, phu_cap_ct
        return [], []
    
    def save_chamcong(self, chamcong_data):
        """L∆∞u d·ªØ li·ªáu ch·∫•m c√¥ng"""
        data = {
            "timestamp": datetime.now().isoformat(),
            "chamcong_data": chamcong_data
        }
        self._save_data(self.chamcong_file, data)
    
    def load_chamcong(self):
        """T·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng"""
        data = self._load_data(self.chamcong_file)
        if data:
            print(f"üìÅ LOAD CH·∫§M C√îNG t·ª´: {self.chamcong_file}")
            chamcong_data = {}
            
            # Ki·ªÉm tra format d·ªØ li·ªáu
            if "employees" in data:
                # Format t·ª´ website (m·ªõi)
                print("‚úÖ Ph√°t hi·ªán format website")
                employees_data = data.get("employees", {})
                export_info = data.get("export_info", {})
                month_year = export_info.get("period", "08/2025")  # L·∫•y t·ª´ export_info.period
                
                print(f"üìÖ Th√°ng/nƒÉm: {month_year}")
                print(f"üë• S·ªë nh√¢n vi√™n: {len(employees_data)}")
                
                for msnv, employee_info in employees_data.items():
                    employee_name = employee_info.get("info", {}).get("name", "")
                    employee_msnv = employee_info.get("info", {}).get("msnv", msnv)
                    
                    if employee_name:
                        # T·∫°o c·∫•u tr√∫c d·ªØ li·ªáu theo format mong ƒë·ª£i - s·ª≠ d·ª•ng c·∫£ t√™n v√† MSNV
                        employee_data = {
                            month_year: {
                                "days_detail": employee_info.get("attendance", {}).get("days", {}),
                                "summary": employee_info.get("attendance", {}).get("summary", {})
                            }
                        }
                        
                        # L∆∞u theo c·∫£ t√™n v√† MSNV ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
                        chamcong_data[employee_name] = employee_data
                        chamcong_data[employee_msnv] = employee_data
                        print(f"   ‚úÖ Loaded {employee_name} ({employee_msnv}) for {month_year}")
            
            elif "chamcong_data" in data:
                # Format t·ª´ ·ª©ng d·ª•ng desktop (c≈©) 
                print("‚ö†Ô∏è Ph√°t hi·ªán format desktop c≈©")
                chamcong_data = data.get("chamcong_data", {})
            
            else:
                # Format tr·ª±c ti·∫øp (c√≥ th·ªÉ t·ª´ export kh√°c)
                print("‚ö†Ô∏è Ph√°t hi·ªán format tr·ª±c ti·∫øp")
                chamcong_data = data
             
            print(f"‚úÖ ƒê√£ load {len(chamcong_data)} nh√¢n vi√™n")
            print(f"   Danh s√°ch: {list(chamcong_data.keys())}")
            return chamcong_data
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng")
        return {}

    def _save_data(self, file_path, data):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            print(f"L·ªói l∆∞u file {file_path}: {e}")
            return False
    
    def _load_data(self, file_path):
        """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"L·ªói t·∫£i file {file_path}: {e}")
        return None
    
    def backup_all_data(self, backup_dir="backup"):
        """T·∫°o backup to√†n b·ªô d·ªØ li·ªáu"""
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = os.path.join(backup_dir, f"backup_{timestamp}")
        os.makedirs(backup_path)
        
        # Copy file d·ªØ li·ªáu c·ªë ƒë·ªãnh
        files_to_backup = [
            self.nhanvien_file,
            self.quydinh_file,
            self.chamcong_file
        ]
        
        for file_path in files_to_backup:
            if os.path.exists(file_path):
                import shutil
                filename = os.path.basename(file_path)
                backup_file = os.path.join(backup_path, filename)
                shutil.copy2(file_path, backup_file)
        
        return backup_path
    
    def restore_from_backup(self, backup_path):
        """Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ backup"""
        if not os.path.exists(backup_path):
            return False
        
        try:
            import shutil
            files_to_restore = [
                "nhanvien.json",
                "quydinh_luong.json",
                "chamcong_3_nhanvien.json"
            ]
            
            for filename in files_to_restore:
                backup_file = os.path.join(backup_path, filename)
                if os.path.exists(backup_file):
                    target_file = os.path.join(self.data_dir, filename)
                    shutil.copy2(backup_file, target_file)
            
            return True
        except Exception as e:
            print(f"L·ªói kh√¥i ph·ª•c backup: {e}")
            return False
    
    def get_data_info(self):
        """L·∫•y th√¥ng tin v·ªÅ d·ªØ li·ªáu hi·ªán t·∫°i"""
        info = {}
        files = [
            ("nhanvien", self.nhanvien_file),
            ("quydinh_luong", self.quydinh_file),
            ("chamcong", self.chamcong_file)
        ]
        
        for name, file_path in files:
            if os.path.exists(file_path):
                try:
                    data = self._load_data(file_path)
                    if data:
                        info[name] = {
                            "exists": True,
                            "timestamp": data.get("timestamp", "Unknown"),
                            "records": data.get("total_records", 0)
                        }
                    else:
                        info[name] = {"exists": False}
                except:
                    info[name] = {"exists": False}
            else:
                info[name] = {"exists": False}
        
        return info 