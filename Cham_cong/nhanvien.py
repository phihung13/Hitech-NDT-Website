from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QDateEdit, QSpinBox, QTableWidget, QTableWidgetItem,
    QPushButton, QMessageBox, QComboBox, QDialog, QFormLayout, QLabel
)
from PyQt5.QtCore import QDate
from PyQt5.QtGui import QFont
from data_manager import DataManager
import json
import os

class ChucVuDialog(QDialog):
    def __init__(self, parent=None, current_chuc_vu=None):
        super().__init__(parent)
        self.setWindowTitle("Qu·∫£n l√Ω ch·ª©c v·ª•")
        self.setModal(True)
        self.setFixedSize(400, 300)
        self.current_chuc_vu = current_chuc_vu or []
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        
        # Ti√™u ƒë·ªÅ
        title = QLabel("Qu·∫£n l√Ω danh s√°ch ch·ª©c v·ª•:")
        title.setFont(QFont("Times New Roman", 12, QFont.Bold))
        layout.addWidget(title)
        
        # List ch·ª©c v·ª• hi·ªán c√≥
        self.combo_chuc_vu = QComboBox()
        self.combo_chuc_vu.addItems(self.current_chuc_vu)
        layout.addWidget(self.combo_chuc_vu)
        
        # Input th√™m ch·ª©c v·ª• m·ªõi
        self.input_chuc_vu_moi = QLineEdit()
        self.input_chuc_vu_moi.setPlaceholderText("Nh·∫≠p ch·ª©c v·ª• m·ªõi...")
        layout.addWidget(self.input_chuc_vu_moi)
        
        # Buttons
        btn_layout = QHBoxLayout()
        
        self.btn_them = QPushButton("‚ûï Th√™m")
        self.btn_them.clicked.connect(self.them_chuc_vu)
        
        self.btn_xoa = QPushButton("üóëÔ∏è X√≥a")
        self.btn_xoa.clicked.connect(self.xoa_chuc_vu)
        
        self.btn_ok = QPushButton("OK")
        self.btn_ok.clicked.connect(self.accept)
        
        self.btn_cancel = QPushButton("H·ªßy")
        self.btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(self.btn_them)
        btn_layout.addWidget(self.btn_xoa)
        btn_layout.addWidget(self.btn_ok)
        btn_layout.addWidget(self.btn_cancel)
        
        layout.addLayout(btn_layout)
        self.setLayout(layout)
    
    def them_chuc_vu(self):
        chuc_vu_moi = self.input_chuc_vu_moi.text().strip()
        if chuc_vu_moi and chuc_vu_moi not in self.current_chuc_vu:
            self.current_chuc_vu.append(chuc_vu_moi)
            self.combo_chuc_vu.addItem(chuc_vu_moi)
            self.input_chuc_vu_moi.clear()
    
    def xoa_chuc_vu(self):
        current_text = self.combo_chuc_vu.currentText()
        if current_text in self.current_chuc_vu:
            self.current_chuc_vu.remove(current_text)
            self.combo_chuc_vu.removeItem(self.combo_chuc_vu.currentIndex())
    
    def get_chuc_vu_list(self):
        return self.current_chuc_vu

class TabNhanVien(QWidget):
    def __init__(self, on_nhanvien_changed=None):
        super().__init__()
        self.data_manager = DataManager()
        self.ds_nhanvien = self.data_manager.load_nhanvien()
        self.on_nhanvien_changed = on_nhanvien_changed  # Callback khi c√≥ thay ƒë·ªïi nh√¢n vi√™n
        
        # Danh s√°ch ch·ª©c v·ª• m·∫∑c ƒë·ªãnh
        self.default_chuc_vu = [
            "Technical Manager",
            "Site Manager", 
            "NDT Team Leader",
            "Technician",
            "R&D Technician"
        ]
        
        # Danh s√°ch t·ªânh th√†nh Vi·ªát Nam
        self.tinh_thanh_vn = [
            "An Giang", "B√† R·ªãa - V≈©ng T√†u", "B·∫Øc Giang", "B·∫Øc K·∫°n", "B·∫°c Li√™u",
            "B·∫Øc Ninh", "B·∫øn Tre", "B√¨nh ƒê·ªãnh", "B√¨nh D∆∞∆°ng", "B√¨nh Ph∆∞·ªõc",
            "B√¨nh Thu·∫≠n", "C√† Mau", "Cao B·∫±ng", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng",
            "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai", "ƒê·ªìng Th√°p", "Gia Lai", "H√† Giang",
            "H√† Nam", "H√† Tƒ©nh", "H·∫£i D∆∞∆°ng", "H·∫≠u Giang", "H√≤a B√¨nh",
            "H∆∞ng Y√™n", "Kh√°nh H√≤a", "Ki√™n Giang", "Kon Tum", "Lai Ch√¢u",
            "L√¢m ƒê·ªìng", "L·∫°ng S∆°n", "L√†o Cai", "Long An", "Nam ƒê·ªãnh",
            "Ngh·ªá An", "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Qu·∫£ng B√¨nh",
            "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã", "S√≥c TrƒÉng",
            "S∆°n La", "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a",
            "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang", "Tr√† Vinh", "Tuy√™n Quang", "Vƒ©nh Long",
            "Vƒ©nh Ph√∫c", "Y√™n B√°i", "Ph√∫ Y√™n", "C·∫ßn Th∆°", "ƒê√† N·∫µng",
            "H·∫£i Ph√≤ng", "H√† N·ªôi", "TP H·ªì Ch√≠ Minh"
        ]
        
        # Load danh s√°ch ch·ª©c v·ª• t√πy ch·ªânh
        self.chuc_vu_list = self.load_chuc_vu_list()
        
        self.init_ui()
        self.capnhat_bang_nv()  # C·∫≠p nh·∫≠t b·∫£ng sau khi t·∫£i d·ªØ li·ªáu

    def load_chuc_vu_list(self):
        """Load danh s√°ch ch·ª©c v·ª• t·ª´ file"""
        try:
            chuc_vu_file = "data/chuc_vu_list.json"
            if os.path.exists(chuc_vu_file):
                with open(chuc_vu_file, 'r', encoding='utf-8') as f:
                    custom_list = json.load(f)
                    return self.default_chuc_vu + custom_list
            return self.default_chuc_vu.copy()
        except:
            return self.default_chuc_vu.copy()
    
    def save_chuc_vu_list(self):
        """Save danh s√°ch ch·ª©c v·ª• t√πy ch·ªânh"""
        try:
            custom_list = [cv for cv in self.chuc_vu_list if cv not in self.default_chuc_vu]
            chuc_vu_file = "data/chuc_vu_list.json"
            os.makedirs(os.path.dirname(chuc_vu_file), exist_ok=True)
            with open(chuc_vu_file, 'w', encoding='utf-8') as f:
                json.dump(custom_list, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u danh s√°ch ch·ª©c v·ª•: {e}")

    def init_ui(self):
        layout = QVBoxLayout()
        # C√°c √¥ nh·∫≠p li·ªáu
        form_layout1 = QHBoxLayout()
        self.inputHoTen = QLineEdit(); self.inputHoTen.setPlaceholderText("H·ªç v√† t√™n")
        self.inputCCCD = QLineEdit(); self.inputCCCD.setPlaceholderText("CCCD")
        self.inputMSNV = QLineEdit(); self.inputMSNV.setPlaceholderText("MSNV")
        self.inputSDT = QLineEdit(); self.inputSDT.setPlaceholderText("S·ªë ƒëi·ªán tho·∫°i")
        self.inputNgaySinh = QDateEdit(); self.inputNgaySinh.setDisplayFormat("d/M/yyyy")
        self.inputQueQuan = QComboBox(); 
        self.inputQueQuan.addItem("Ch·ªçn t·ªânh th√†nh...")
        self.inputQueQuan.addItems(self.tinh_thanh_vn)
        self.inputQueQuan.setEditable(True)
        form_layout1.addWidget(self.inputHoTen)
        form_layout1.addWidget(self.inputCCCD)
        form_layout1.addWidget(self.inputMSNV)
        form_layout1.addWidget(self.inputSDT)
        form_layout1.addWidget(self.inputNgaySinh)
        form_layout1.addWidget(self.inputQueQuan)

        form_layout2 = QHBoxLayout()
        self.inputChucVu = QComboBox()
        self.inputChucVu.addItem("Ch·ªçn ch·ª©c v·ª•...")
        self.inputChucVu.addItems(self.chuc_vu_list)
        self.inputChucVu.setEditable(True)
        self.inputPhongBan = QLineEdit(); self.inputPhongBan.setPlaceholderText("Ph√≤ng ban")
        self.inputTrinhDo = QLineEdit(); self.inputTrinhDo.setPlaceholderText("Tr√¨nh ƒë·ªô h·ªçc v·∫•n")
        self.inputChungNhan = QLineEdit(); self.inputChungNhan.setPlaceholderText("Ch·ª©ng nh·∫≠n c√≥ ƒë∆∞·ª£c")
        self.inputNguoiPhuThuoc = QSpinBox(); self.inputNguoiPhuThuoc.setRange(0, 20)
        self.inputNguoiPhuThuoc.setPrefix("S·ªë ng∆∞·ªùi ph·ª• thu·ªôc: ")
        self.inputSTK = QLineEdit(); self.inputSTK.setPlaceholderText("STK ng√¢n h√†ng")
        self.inputNganHang = QLineEdit(); self.inputNganHang.setPlaceholderText("Ng√¢n h√†ng")
        form_layout2.addWidget(self.inputChucVu)
        form_layout2.addWidget(self.inputPhongBan)
        form_layout2.addWidget(self.inputTrinhDo)
        form_layout2.addWidget(self.inputChungNhan)
        form_layout2.addWidget(self.inputNguoiPhuThuoc)
        form_layout2.addWidget(self.inputSTK)
        form_layout2.addWidget(self.inputNganHang)

        layout.addLayout(form_layout1)
        layout.addLayout(form_layout2)

        # B·∫£ng nh√¢n vi√™n
        self.tableNhanVien = QTableWidget(0, 13)
        self.tableNhanVien.setHorizontalHeaderLabels([
            "H·ªç v√† t√™n", "CCCD", "MSNV", "S·ªë ƒëi·ªán tho·∫°i", "Ng√†y sinh", "Qu√™ qu√°n",
            "Ch·ª©c v·ª•", "Ph√≤ng ban", "Tr√¨nh ƒë·ªô h·ªçc v·∫•n", "Ch·ª©ng nh·∫≠n c√≥ ƒë∆∞·ª£c", "S·ªë ng∆∞·ªùi ph·ª• thu·ªôc",
            "STK ng√¢n h√†ng", "Ng√¢n h√†ng"
        ])
        layout.addWidget(self.tableNhanVien)

        # C√°c n√∫t thao t√°c
        btn_layout = QHBoxLayout()
        self.btnThemNV = QPushButton("Th√™m")
        self.btnSuaNV = QPushButton("S·ª≠a")
        self.btnXoaNV = QPushButton("X√≥a")
        self.btnQuanLyChucVu = QPushButton("üè∑Ô∏è Qu·∫£n l√Ω ch·ª©c v·ª•")
        btn_layout.addWidget(self.btnThemNV)
        btn_layout.addWidget(self.btnSuaNV)
        btn_layout.addWidget(self.btnXoaNV)
        btn_layout.addWidget(self.btnQuanLyChucVu)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        # K·∫øt n·ªëi s·ª± ki·ªán
        self.btnThemNV.clicked.connect(self.them_nhanvien)
        self.btnXoaNV.clicked.connect(self.xoa_nhanvien)
        self.btnSuaNV.clicked.connect(self.sua_nhanvien)
        self.btnQuanLyChucVu.clicked.connect(self.quan_ly_chuc_vu)
        self.tableNhanVien.cellClicked.connect(self.hien_thi_nhanvien)

    def them_nhanvien(self):
        """Th√™m nh√¢n vi√™n m·ªõi"""
        try:
            # L·∫•y th√¥ng tin t·ª´ c√°c input
            ho_ten = self.inputHoTen.text().strip()
            cccd = self.inputCCCD.text().strip()
            msnv = self.inputMSNV.text().strip()
            sdt = self.inputSDT.text().strip()
            ngay_sinh = self.inputNgaySinh.text().strip()
            que_quan = self.inputQueQuan.currentText().strip()
            if que_quan == "Ch·ªçn t·ªânh th√†nh...":
                que_quan = ""
            chuc_vu = self.inputChucVu.currentText().strip()
            if chuc_vu == "Ch·ªçn ch·ª©c v·ª•...":
                chuc_vu = ""
            phong_ban = self.inputPhongBan.text().strip()
            trinh_do = self.inputTrinhDo.text().strip()
            chung_chi = self.inputChungNhan.text().strip()
            trang_thai = self.inputNguoiPhuThuoc.value() # Assuming inputNguoiPhuThuoc is the correct one for this
            stk = self.inputSTK.text().strip()
            ngan_hang = self.inputNganHang.text().strip()
            
            # Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
            if not ho_ten or not cccd or not msnv:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!")
                return
            
            # Ki·ªÉm tra tr√πng l·∫∑p
            for row in range(self.tableNhanVien.rowCount()):
                item_msnv = self.tableNhanVien.item(row, 2)  # C·ªôt MSNV
                if item_msnv and item_msnv.text() == msnv:
                    QMessageBox.warning(self, "C·∫£nh b√°o", "MSNV ƒë√£ t·ªìn t·∫°i!")
                    return
            
            # Th√™m v√†o b·∫£ng
            row = self.tableNhanVien.rowCount()
            self.tableNhanVien.insertRow(row)
            
            self.tableNhanVien.setItem(row, 0, QTableWidgetItem(ho_ten))
            self.tableNhanVien.setItem(row, 1, QTableWidgetItem(cccd))
            self.tableNhanVien.setItem(row, 2, QTableWidgetItem(msnv))
            self.tableNhanVien.setItem(row, 3, QTableWidgetItem(sdt))
            self.tableNhanVien.setItem(row, 4, QTableWidgetItem(ngay_sinh))
            self.tableNhanVien.setItem(row, 5, QTableWidgetItem(que_quan))
            self.tableNhanVien.setItem(row, 6, QTableWidgetItem(chuc_vu))
            self.tableNhanVien.setItem(row, 7, QTableWidgetItem(phong_ban))
            self.tableNhanVien.setItem(row, 8, QTableWidgetItem(trinh_do))
            self.tableNhanVien.setItem(row, 9, QTableWidgetItem(chung_chi))
            self.tableNhanVien.setItem(row, 10, QTableWidgetItem(trang_thai))
            self.tableNhanVien.setItem(row, 11, QTableWidgetItem(stk))
            self.tableNhanVien.setItem(row, 12, QTableWidgetItem(ngan_hang))
            
            # X√≥a d·ªØ li·ªáu input
            self.clear_inputs()
            
            # Auto-save d·ªØ li·ªáu
            self.auto_save_data()
            
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ th√™m nh√¢n vi√™n m·ªõi!")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n: {str(e)}")
    
    def auto_save_data(self):
        """T·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu"""
        try:
            # Thu th·∫≠p d·ªØ li·ªáu t·ª´ b·∫£ng
            data = []
            for row in range(self.tableNhanVien.rowCount()):
                row_data = []
                for col in range(self.tableNhanVien.columnCount()):
                    item = self.tableNhanVien.item(row, col)
                    row_data.append(item.text() if item else "")
                if any(cell.strip() for cell in row_data):  # Ch·ªâ l∆∞u d√≤ng c√≥ d·ªØ li·ªáu
                    data.append(row_data)
            
            # L∆∞u v√†o file
            self.data_manager.save_nhanvien(data)
            print("ƒê√£ t·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu nh√¢n vi√™n")
            
            # Th√¥ng b√°o cho c√°c tab kh√°c c·∫≠p nh·∫≠t (quan tr·ªçng!)
            if self.on_nhanvien_changed:
                self.on_nhanvien_changed()
                print("ƒê√£ th√¥ng b√°o c·∫≠p nh·∫≠t cho tab quy ƒë·ªãnh l∆∞∆°ng")
            
        except Exception as e:
            print(f"L·ªói t·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu nh√¢n vi√™n: {str(e)}")

    def quan_ly_chuc_vu(self):
        """M·ªü dialog qu·∫£n l√Ω ch·ª©c v·ª•"""
        dialog = ChucVuDialog(self, self.chuc_vu_list.copy())
        if dialog.exec_() == QDialog.Accepted:
            # C·∫≠p nh·∫≠t danh s√°ch ch·ª©c v·ª•
            self.chuc_vu_list = dialog.get_chuc_vu_list()
            self.save_chuc_vu_list()
            
            # C·∫≠p nh·∫≠t combo box
            current_text = self.inputChucVu.currentText()
            self.inputChucVu.clear()
            self.inputChucVu.addItem("Ch·ªçn ch·ª©c v·ª•...")
            self.inputChucVu.addItems(self.chuc_vu_list)
            
            # Gi·ªØ l·∫°i l·ª±a ch·ªçn hi·ªán t·∫°i n·∫øu c√≥
            if current_text in self.chuc_vu_list:
                self.inputChucVu.setCurrentText(current_text)

    def xoa_nhanvien(self):
        """X√≥a nh√¢n vi√™n ƒë∆∞·ª£c ch·ªçn"""
        try:
            current_row = self.tableNhanVien.currentRow()
            if current_row >= 0:
                # L·∫•y t√™n nh√¢n vi√™n ƒë·ªÉ hi·ªÉn th·ªã
                item = self.tableNhanVien.item(current_row, 0)
                ten_nv = item.text() if item else "Nh√¢n vi√™n"
                
                # X√°c nh·∫≠n x√≥a
                reply = QMessageBox.question(
                    self, "X√°c nh·∫≠n x√≥a", 
                    f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n '{ten_nv}'?",
                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    self.tableNhanVien.removeRow(current_row)
                    
                    # Auto-save d·ªØ li·ªáu
                    self.auto_save_data()
                    
                    QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a nh√¢n vi√™n '{ten_nv}'!")
            else:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n: {str(e)}")

    def sua_nhanvien(self):
        dong = self.tableNhanVien.currentRow()
        if dong >= 0:
            nv = [
                self.inputHoTen.text().strip(),
                self.inputCCCD.text().strip(),
                self.inputMSNV.text().strip(),
                self.inputSDT.text().strip(),
                self.inputNgaySinh.text(),
                self.inputQueQuan.currentText().strip() if self.inputQueQuan.currentText() != "Ch·ªçn t·ªânh th√†nh..." else "",
                self.inputChucVu.currentText().strip() if self.inputChucVu.currentText() != "Ch·ªçn ch·ª©c v·ª•..." else "",
                self.inputPhongBan.text().strip(),
                self.inputTrinhDo.text().strip(),
                self.inputChungNhan.text().strip(),
                str(self.inputNguoiPhuThuoc.value()),
                self.inputSTK.text().strip(),
                self.inputNganHang.text().strip()
            ]
            if not nv[0] or not nv[2]:
                QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß H·ªç t√™n v√† MSNV.")
                return
            self.ds_nhanvien[dong] = nv
            self.capnhat_bang_nv()
            # L∆∞u d·ªØ li·ªáu
            self.data_manager.save_nhanvien(self.ds_nhanvien)
            
            # Th√¥ng b√°o cho c√°c tab kh√°c c·∫≠p nh·∫≠t
            if self.on_nhanvien_changed:
                self.on_nhanvien_changed()
                print("ƒê√£ th√¥ng b√°o c·∫≠p nh·∫≠t cho tab quy ƒë·ªãnh l∆∞∆°ng")
        else:
            QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn nh√¢n vi√™n ƒë·ªÉ s·ª≠a.")

    def hien_thi_nhanvien(self, row, col):
        try:
            # Ki·ªÉm tra row c√≥ h·ª£p l·ªá kh√¥ng
            if row < 0 or row >= len(self.ds_nhanvien):
                print(f"L·ªói: Row {row} kh√¥ng h·ª£p l·ªá, t·ªïng s·ªë nh√¢n vi√™n: {len(self.ds_nhanvien)}")
                return
            
            nv = self.ds_nhanvien[row]
            
            # Ki·ªÉm tra nv c√≥ ƒë·ªß ph·∫ßn t·ª≠ kh√¥ng
            if len(nv) < 13:
                print(f"L·ªói: Nh√¢n vi√™n t·∫°i row {row} kh√¥ng ƒë·ªß th√¥ng tin, ch·ªâ c√≥ {len(nv)} ph·∫ßn t·ª≠")
                return
            
            # Hi·ªÉn th·ªã th√¥ng tin nh√¢n vi√™n v·ªõi ki·ªÉm tra an to√†n
            self.inputHoTen.setText(str(nv[0]) if nv[0] else "")
            self.inputCCCD.setText(str(nv[1]) if nv[1] else "")
            self.inputMSNV.setText(str(nv[2]) if nv[2] else "")
            self.inputSDT.setText(str(nv[3]) if nv[3] else "")
            
            # X·ª≠ l√Ω ng√†y sinh an to√†n
            try:
                if nv[4]:
                    self.inputNgaySinh.setDate(QDate.fromString(str(nv[4]), "d/M/yyyy"))
                else:
                    self.inputNgaySinh.clear()
            except:
                self.inputNgaySinh.clear()
            
            # Set combo box cho qu√™ qu√°n
            que_quan = str(nv[5]) if nv[5] else ""
            if que_quan in self.tinh_thanh_vn:
                self.inputQueQuan.setCurrentText(que_quan)
            else:
                self.inputQueQuan.setEditText(que_quan)
            
            # Set combo box cho ch·ª©c v·ª•
            chuc_vu = str(nv[6]) if nv[6] else ""
            if chuc_vu in self.chuc_vu_list:
                self.inputChucVu.setCurrentText(chuc_vu)
            else:
                self.inputChucVu.setEditText(chuc_vu)
            
            self.inputPhongBan.setText(str(nv[7]) if nv[7] else "")
            self.inputTrinhDo.setText(str(nv[8]) if nv[8] else "")
            self.inputChungNhan.setText(str(nv[9]) if nv[9] else "")
            
            # X·ª≠ l√Ω s·ªë ng∆∞·ªùi ph·ª• thu·ªôc an to√†n
            try:
                nguoi_phu_thuoc = int(nv[10]) if nv[10] else 0
                self.inputNguoiPhuThuoc.setValue(nguoi_phu_thuoc)
            except:
                self.inputNguoiPhuThuoc.setValue(0)
            
            self.inputSTK.setText(str(nv[11]) if nv[11] else "")
            self.inputNganHang.setText(str(nv[12]) if nv[12] else "")
            
        except Exception as e:
            print(f"L·ªói khi hi·ªÉn th·ªã th√¥ng tin nh√¢n vi√™n t·∫°i row {row}: {str(e)}")
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin nh√¢n vi√™n: {str(e)}")

    def capnhat_bang_nv(self):
        self.tableNhanVien.setRowCount(0)
        for nv in self.ds_nhanvien:
            row = self.tableNhanVien.rowCount()
            self.tableNhanVien.insertRow(row)
            for col, val in enumerate(nv):
                self.tableNhanVien.setItem(row, col, QTableWidgetItem(val))

    def clear_inputs(self):
        """X√≥a d·ªØ li·ªáu trong c√°c input"""
        self.inputHoTen.clear()
        self.inputCCCD.clear()
        self.inputMSNV.clear()
        self.inputSDT.clear()
        self.inputNgaySinh.clear()
        self.inputQueQuan.setCurrentIndex(0)  # Reset v·ªÅ "Ch·ªçn t·ªânh th√†nh..."
        self.inputChucVu.setCurrentIndex(0)  # Reset v·ªÅ "Ch·ªçn ch·ª©c v·ª•..."
        self.inputPhongBan.clear()
        self.inputTrinhDo.clear()
        self.inputChungNhan.clear()
        self.inputNguoiPhuThuoc.setValue(0)
        self.inputSTK.clear()
        self.inputNganHang.clear()

    def refresh_data(self):
        """T·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ªØ li·ªáu khi c√≥ thay ƒë·ªïi"""
        try:
            print("ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu nh√¢n vi√™n...")
            
            # Reload d·ªØ li·ªáu t·ª´ data manager
            self.ds_nhanvien = self.data_manager.load_nhanvien()
            
            # Refresh b·∫£ng
            self.capnhat_bang_nv()
            
            print("ƒê√£ c·∫≠p nh·∫≠t xong d·ªØ li·ªáu nh√¢n vi√™n")
            
        except Exception as e:
            print(f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu nh√¢n vi√™n: {e}") 