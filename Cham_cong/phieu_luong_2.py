#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Phi·∫øu L∆∞∆°ng 2 - Form phi·∫øu l∆∞∆°ng ƒë·∫ßy ƒë·ªß
M·ª•c ti√™u: T·∫°o phi·∫øu l∆∞∆°ng ho√†n ch·ªânh v·ªõi ƒë·∫ßy ƒë·ªß th√†nh ph·∫ßn
"""

import sys
import os
from datetime import datetime
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
from data_manager import DataManager
from employee_mapper import EmployeeMapper

# Import th∆∞ vi·ªán t·∫°o PDF ƒë·∫πp
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import cm, mm
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from reportlab.pdfgen import canvas
    from reportlab.lib.utils import ImageReader
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("‚ö†Ô∏è ReportLab kh√¥ng c√≥ s·∫µn. C√†i ƒë·∫∑t: pip install reportlab")

# Import PIL ƒë·ªÉ x·ª≠ l√Ω ·∫£nh
try:
    from PIL import Image as PILImage
    from PIL import ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False
    print("‚ö†Ô∏è PIL kh√¥ng c√≥ s·∫µn. C√†i ƒë·∫∑t: pip install pillow")


class PhieuLuong2(QWidget):
    """Phi·∫øu l∆∞∆°ng 2 - Form phi·∫øu l∆∞∆°ng ƒë·∫ßy ƒë·ªß"""
    
    def __init__(self, bang_cong_tab=None):
        super().__init__()
        self.bang_cong_tab = bang_cong_tab
        self.current_employee_data = None
        self.current_period = None
        self.current_msnv = None
        
        # Kh·ªüi t·∫°o data manager v√† employee mapper
        self.data_manager = DataManager()
        self.employee_mapper = EmployeeMapper()
        
        # Load d·ªØ li·ªáu t·ª´ database
        self.load_database_data()
        
        self.init_ui()
    
    def load_database_data(self):
        """Load d·ªØ li·ªáu t·ª´ database"""
        try:
            # Load d·ªØ li·ªáu nh√¢n vi√™n
            self.ds_nhanvien = self.data_manager.load_nhanvien()
            self.employee_mapper.load_from_nhanvien_data(self.ds_nhanvien)
            
            # Load quy ƒë·ªãnh l∆∞∆°ng
            self.ds_luong_nv, self.ds_phu_cap_ct = self.data_manager.load_quydinh_luong()
            
            print(f"‚úÖ Loaded {len(self.ds_nhanvien)} employees and {len(self.ds_luong_nv)} salary records")
            
        except Exception as e:
            print(f"‚ùå L·ªói load database: {e}")
            self.ds_nhanvien = []
            self.ds_luong_nv = []
            self.ds_phu_cap_ct = []
        
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán form phi·∫øu l∆∞∆°ng"""
        self.setWindowTitle("PHI·∫æU L∆Ø∆†NG NH√ÇN VI√äN")
        self.setMinimumSize(900, 800)
        
        # Main layout
        main_layout = QVBoxLayout()
        
        # Header section
        self.create_header_section(main_layout)
        
        # Employee selection section
        self.create_selection_section(main_layout)
        
        # Scroll area for salary form
        scroll = QScrollArea()
        scroll_widget = QWidget()
        self.form_layout = QVBoxLayout(scroll_widget)
        
        # Create salary form sections
        self.create_employee_info_section()
        self.create_salary_calculation_section()
        self.create_allowance_section()
        self.create_overtime_section()
        self.create_kpi_section()
        self.create_deduction_section()
        self.create_summary_section()
        
        scroll.setWidget(scroll_widget)
        scroll.setWidgetResizable(True)
        main_layout.addWidget(scroll)
        
        # Action buttons
        self.create_action_buttons(main_layout)
        
        self.setLayout(main_layout)
        
        # Apply styles
        self.apply_styles()
        
    def create_header_section(self, layout):
        """T·∫°o ph·∫ßn header"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.NoFrame)
        header_frame.setStyleSheet("background-color: #f8f9fa;")
        
        header_layout = QVBoxLayout(header_frame)
        
        # Company info
        company_label = QLabel("HITECH NDT CO., LTD.")
        company_label.setAlignment(Qt.AlignCenter)
        company_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #007bff;")
        header_layout.addWidget(company_label)
        
        # Title
        title_label = QLabel("PHI·∫æU L∆Ø∆†NG NH√ÇN VI√äN")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 20px; font-weight: bold; color: #dc3545; margin: 10px;")
        header_layout.addWidget(title_label)
        
        # Date
        date_label = QLabel(f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        date_label.setAlignment(Qt.AlignCenter)
        date_label.setStyleSheet("font-size: 12px; color: #666;")
        header_layout.addWidget(date_label)
        
        layout.addWidget(header_frame)
    
    def create_selection_section(self, layout):
        """T·∫°o ph·∫ßn ch·ªçn nh√¢n vi√™n v√† th√°ng"""
        selection_frame = QFrame()
        selection_frame.setFrameStyle(QFrame.Box)
        selection_layout = QHBoxLayout(selection_frame)
        
        # Period selection
        period_label = QLabel("Th√°ng:")
        period_label.setStyleSheet("font-weight: bold;")
        self.period_combo = QComboBox()
        self.period_combo.setMinimumWidth(150)
        self.period_combo.currentTextChanged.connect(self.on_period_changed)
        
        # Employee selection
        employee_label = QLabel("Nh√¢n vi√™n:")
        employee_label.setStyleSheet("font-weight: bold;")
        self.employee_combo = QComboBox()
        self.employee_combo.setMinimumWidth(300)
        self.employee_combo.currentTextChanged.connect(self.on_employee_changed)
        
        # Load button
        self.btn_load = QPushButton("üîÑ T·∫£i d·ªØ li·ªáu")
        self.btn_load.clicked.connect(self.load_data)
        self.btn_load.setStyleSheet("padding: 8px; background-color: #28a745; color: white; font-weight: bold;")
        
        selection_layout.addWidget(period_label)
        selection_layout.addWidget(self.period_combo)
        selection_layout.addWidget(employee_label)
        selection_layout.addWidget(self.employee_combo)
        selection_layout.addWidget(self.btn_load)
        selection_layout.addStretch()
        
        layout.addWidget(selection_frame)
    
    def create_employee_info_section(self):
        """T·∫°o section th√¥ng tin nh√¢n vi√™n"""
        group = QGroupBox("TH√îNG TIN NH√ÇN VI√äN")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #007bff; }")
        layout = QGridLayout(group)
        
        # Create form fields
        self.emp_msnv = QLineEdit()
        self.emp_msnv.setReadOnly(True)
        self.emp_name = QLineEdit()
        self.emp_name.setReadOnly(True)
        self.emp_position = QLineEdit()
        self.emp_position.setReadOnly(True)
        self.emp_department = QLineEdit()
        self.emp_department.setReadOnly(True)
        self.emp_email = QLineEdit()
        self.emp_email.setReadOnly(True)
        
        # Add to layout
        layout.addWidget(QLabel("MSNV:"), 0, 0)
        layout.addWidget(self.emp_msnv, 0, 1)
        layout.addWidget(QLabel("H·ªç t√™n:"), 0, 2)
        layout.addWidget(self.emp_name, 0, 3)
        
        layout.addWidget(QLabel("Ch·ª©c v·ª•:"), 1, 0)
        layout.addWidget(self.emp_position, 1, 1)
        layout.addWidget(QLabel("Ph√≤ng ban:"), 1, 2)
        layout.addWidget(self.emp_department, 1, 3)
        
        layout.addWidget(QLabel("Email:"), 2, 0)
        layout.addWidget(self.emp_email, 2, 1, 1, 3)
        
        self.form_layout.addWidget(group)
    
    def create_salary_calculation_section(self):
        """T·∫°o section t√≠nh l∆∞∆°ng c∆° b·∫£n"""
        group = QGroupBox("L∆Ø∆†NG C∆† B·∫¢N")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #28a745; }")
        layout = QGridLayout(group)
        
        # Fields
        self.basic_salary = QLineEdit("13,000,000")
        self.work_days = QLineEdit("0")
        self.office_days = QLineEdit("0")
        self.training_days = QLineEdit("0")
        self.overseas_days = QLineEdit("0")
        self.total_work_days = QLineEdit("0")
        self.total_work_days.setReadOnly(True)
        self.basic_amount = QLineEdit("0")
        self.basic_amount.setReadOnly(True)
        
        # Connect signals for auto calculation
        self.basic_salary.textChanged.connect(self.calculate_all)
        self.work_days.textChanged.connect(self.calculate_basic_salary)
        self.office_days.textChanged.connect(self.calculate_basic_salary)
        self.training_days.textChanged.connect(self.calculate_basic_salary)
        self.overseas_days.textChanged.connect(self.calculate_basic_salary)
        
        # Layout
        layout.addWidget(QLabel("L∆∞∆°ng c∆° b·∫£n (VNƒê):"), 0, 0)
        layout.addWidget(self.basic_salary, 0, 1)
        layout.addWidget(QLabel("Ng√†y c√¥ng tr∆∞·ªùng:"), 0, 2)
        layout.addWidget(self.work_days, 0, 3)
        
        layout.addWidget(QLabel("Ng√†y vƒÉn ph√≤ng:"), 1, 0)
        layout.addWidget(self.office_days, 1, 1)
        layout.addWidget(QLabel("Ng√†y ƒë√†o t·∫°o:"), 1, 2)
        layout.addWidget(self.training_days, 1, 3)
        
        layout.addWidget(QLabel("Ng√†y ƒëi n∆∞·ªõc ngo√†i:"), 2, 0)
        layout.addWidget(self.overseas_days, 2, 1)
        layout.addWidget(QLabel("T·ªïng ng√†y l√†m:"), 2, 2)
        layout.addWidget(self.total_work_days, 2, 3)
        
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 3, 0)
        layout.addWidget(self.basic_amount, 3, 1)
        
        self.form_layout.addWidget(group)
    
    def create_allowance_section(self):
        """T·∫°o section ph·ª• c·∫•p"""
        group = QGroupBox("PH·ª§ C·∫§P")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #ffc107; }")
        layout = QGridLayout(group)
        
        # Fields
        self.work_allowance_rate = QLineEdit("150,000")
        self.work_allowance = QLineEdit("0")
        self.work_allowance.setReadOnly(True)
        
        self.training_allowance_rate = QLineEdit("40,000")
        self.training_allowance = QLineEdit("0")
        self.training_allowance.setReadOnly(True)
        
        self.office_allowance_rate = QLineEdit("20,000")
        self.office_allowance = QLineEdit("0")
        self.office_allowance.setReadOnly(True)
        
        # Th√™m ph·ª• c·∫•p ƒëi n∆∞·ªõc ngo√†i
        self.overseas_allowance_rate = QLineEdit("500,000")
        self.overseas_allowance = QLineEdit("0")
        self.overseas_allowance.setReadOnly(True)
        
        # H·ªá s·ªë ch·ª©c danh
        self.position_coefficient = QLineEdit("0.44")
        self.position_coefficient.setReadOnly(True)
        
        self.gas_allowance_rate = QLineEdit("36,000")
        self.gas_allowance = QLineEdit("0")
        self.gas_allowance.setReadOnly(True)
        
        # Th√™m ph·ª• c·∫•p ƒëi·ªán tho·∫°i
        self.phone_allowance_rate = QLineEdit("50,000")
        self.phone_allowance = QLineEdit("0")
        self.phone_allowance.setReadOnly(True)
        
        # Th√™m ph·ª• c·∫•p kh√°ch s·∫°n
        self.hotel_allowance_rate = QLineEdit("200,000")
        self.hotel_allowance = QLineEdit("0")
        self.hotel_allowance.setReadOnly(True)
        
        self.total_allowance = QLineEdit("0")
        self.total_allowance.setReadOnly(True)
        
        # Connect signals
        self.work_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.training_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.office_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.overseas_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.gas_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.phone_allowance_rate.textChanged.connect(self.calculate_allowances)
        self.hotel_allowance_rate.textChanged.connect(self.calculate_allowances)
        
        # Layout
        layout.addWidget(QLabel("PC c√¥ng tr∆∞·ªùng (W)/ng√†y:"), 0, 0)
        layout.addWidget(self.work_allowance_rate, 0, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 0, 2)
        layout.addWidget(self.work_allowance, 0, 3)
        
        layout.addWidget(QLabel("PC ƒëi n∆∞·ªõc ngo√†i/ng√†y:"), 1, 0)
        layout.addWidget(self.overseas_allowance_rate, 1, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 1, 2)
        layout.addWidget(self.overseas_allowance, 1, 3)
        
        layout.addWidget(QLabel("PC vƒÉn ph√≤ng (O)/ng√†y:"), 2, 0)
        layout.addWidget(self.office_allowance_rate, 2, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 2, 2)
        layout.addWidget(self.office_allowance, 2, 3)
        
        layout.addWidget(QLabel("Ch·ª©c danh (h·ªá s·ªë):"), 3, 0)
        layout.addWidget(self.position_coefficient, 3, 1)
        layout.addWidget(QLabel(""), 3, 2)
        layout.addWidget(QLabel(""), 3, 3)
        
        layout.addWidget(QLabel("XƒÉng xe/ng√†y:"), 4, 0)
        layout.addWidget(self.gas_allowance_rate, 4, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 4, 2)
        layout.addWidget(self.gas_allowance, 4, 3)
        
        layout.addWidget(QLabel("PC ƒëi·ªán tho·∫°i/ng√†y:"), 5, 0)
        layout.addWidget(self.phone_allowance_rate, 5, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 5, 2)
        layout.addWidget(self.phone_allowance, 5, 3)
        
        layout.addWidget(QLabel("PC kh√°ch s·∫°n/ng√†y:"), 6, 0)
        layout.addWidget(self.hotel_allowance_rate, 6, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 6, 2)
        layout.addWidget(self.hotel_allowance, 6, 3)
        
        layout.addWidget(QLabel("T·ªîNG PH·ª§ C·∫§P:"), 7, 2)
        layout.addWidget(self.total_allowance, 7, 3)
        
        self.form_layout.addWidget(group)
    
    def create_overtime_section(self):
        """T·∫°o section th√™m gi·ªù"""
        group = QGroupBox("TH√äM GI·ªú")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #dc3545; }")
        layout = QGridLayout(group)
        
        # Fields
        self.overtime_150_hours = QLineEdit("0")
        self.overtime_150_amount = QLineEdit("0")
        self.overtime_150_amount.setReadOnly(True)
        
        self.sunday_200_hours = QLineEdit("0")
        self.sunday_200_amount = QLineEdit("0")
        self.sunday_200_amount.setReadOnly(True)
        
        self.holiday_300_hours = QLineEdit("0")
        self.holiday_300_amount = QLineEdit("0")
        self.holiday_300_amount.setReadOnly(True)
        
        self.total_overtime = QLineEdit("0")
        self.total_overtime.setReadOnly(True)
        
        # Connect signals
        self.overtime_150_hours.textChanged.connect(self.calculate_overtime)
        self.sunday_200_hours.textChanged.connect(self.calculate_overtime)
        self.holiday_300_hours.textChanged.connect(self.calculate_overtime)
        
        # Layout
        layout.addWidget(QLabel("Th√™m gi·ªù 150% (gi·ªù):"), 0, 0)
        layout.addWidget(self.overtime_150_hours, 0, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 0, 2)
        layout.addWidget(self.overtime_150_amount, 0, 3)
        
        layout.addWidget(QLabel("Ch·ªß nh·∫≠t 200% (gi·ªù):"), 1, 0)
        layout.addWidget(self.sunday_200_hours, 1, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 1, 2)
        layout.addWidget(self.sunday_200_amount, 1, 3)
        
        layout.addWidget(QLabel("L·ªÖ t·∫øt 300% (gi·ªù):"), 2, 0)
        layout.addWidget(self.holiday_300_hours, 2, 1)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 2, 2)
        layout.addWidget(self.holiday_300_amount, 2, 3)
        
        layout.addWidget(QLabel("T·ªîNG TH√äM GI·ªú:"), 3, 2)
        layout.addWidget(self.total_overtime, 3, 3)
        
        self.form_layout.addWidget(group)
    
    def create_kpi_section(self):
        """T·∫°o section KPI"""
        group = QGroupBox("KPI - TH∆Ø·ªûNG HI·ªÜU SU·∫§T")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #17a2b8; }")
        layout = QGridLayout(group)
        
        # Fields
        self.paut_meters = QLineEdit("0")
        self.paut_rate = QLineEdit("50,000")
        self.paut_amount = QLineEdit("0")
        self.paut_amount.setReadOnly(True)
        
        self.tofd_meters = QLineEdit("0")
        self.tofd_rate = QLineEdit("60,000")
        self.tofd_amount = QLineEdit("0")
        self.tofd_amount.setReadOnly(True)
        
        self.other_kpi = QLineEdit("0")
        self.total_kpi = QLineEdit("0")
        self.total_kpi.setReadOnly(True)
        
        # Connect signals
        self.paut_meters.textChanged.connect(self.calculate_kpi)
        self.paut_rate.textChanged.connect(self.calculate_kpi)
        self.tofd_meters.textChanged.connect(self.calculate_kpi)
        self.tofd_rate.textChanged.connect(self.calculate_kpi)
        self.other_kpi.textChanged.connect(self.calculate_kpi)
        
        # Layout
        layout.addWidget(QLabel("PAUT (m√©t):"), 0, 0)
        layout.addWidget(self.paut_meters, 0, 1)
        layout.addWidget(QLabel("ƒê∆°n gi√°:"), 0, 2)
        layout.addWidget(self.paut_rate, 0, 3)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 0, 4)
        layout.addWidget(self.paut_amount, 0, 5)
        
        layout.addWidget(QLabel("TOFD (m√©t):"), 1, 0)
        layout.addWidget(self.tofd_meters, 1, 1)
        layout.addWidget(QLabel("ƒê∆°n gi√°:"), 1, 2)
        layout.addWidget(self.tofd_rate, 1, 3)
        layout.addWidget(QLabel("Th√†nh ti·ªÅn:"), 1, 4)
        layout.addWidget(self.tofd_amount, 1, 5)
        
        layout.addWidget(QLabel("KPI kh√°c:"), 2, 0)
        layout.addWidget(self.other_kpi, 2, 1)
        layout.addWidget(QLabel("T·ªîNG KPI:"), 2, 4)
        layout.addWidget(self.total_kpi, 2, 5)
        
        self.form_layout.addWidget(group)
    
    def create_deduction_section(self):
        """T·∫°o section kh·∫•u tr·ª´"""
        group = QGroupBox("KH·∫§U TR·ª™")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #6f42c1; }")
        layout = QGridLayout(group)
        
        # Fields
        self.insurance_deduction = QLineEdit("0")
        self.tax_deduction = QLineEdit("0")
        self.advance_deduction = QLineEdit("0")
        self.other_deduction = QLineEdit("0")
        
        # Th√™m c√°c tr∆∞·ªùng thu·∫ø
        self.personal_income = QLineEdit("0")
        self.personal_income.setReadOnly(True)
        self.personal_income.setStyleSheet("background-color: #f8f9fa;")
        
        self.family_deduction = QLineEdit("11,000,000")
        self.family_deduction.setStyleSheet("background-color: #fff3cd;")
        
        self.taxable_income = QLineEdit("0")
        self.taxable_income.setReadOnly(True)
        self.taxable_income.setStyleSheet("background-color: #f8f9fa;")
        
        self.tax_bracket = QLineEdit("0")
        self.tax_bracket.setReadOnly(True)
        self.tax_bracket.setStyleSheet("background-color: #f8f9fa;")
        
        self.total_deduction = QLineEdit("0")
        self.total_deduction.setReadOnly(True)
        
        # Connect signals
        self.insurance_deduction.textChanged.connect(self.calculate_deductions)
        self.tax_deduction.textChanged.connect(self.calculate_deductions)
        self.advance_deduction.textChanged.connect(self.calculate_deductions)
        self.other_deduction.textChanged.connect(self.calculate_deductions)
        self.family_deduction.textChanged.connect(self.calculate_tax)
        
        # Layout - Ph·∫ßn kh·∫•u tr·ª´ c∆° b·∫£n
        layout.addWidget(QLabel("B·∫£o hi·ªÉm:"), 0, 0)
        layout.addWidget(self.insurance_deduction, 0, 1)
        layout.addWidget(QLabel("Thu·∫ø TNCN:"), 0, 2)
        layout.addWidget(self.tax_deduction, 0, 3)
        
        layout.addWidget(QLabel("T·∫°m ·ª©ng:"), 1, 0)
        layout.addWidget(self.advance_deduction, 1, 1)
        layout.addWidget(QLabel("Kh·∫•u tr·ª´ kh√°c:"), 1, 2)
        layout.addWidget(self.other_deduction, 1, 3)
        
        # Layout - Ph·∫ßn t√≠nh thu·∫ø
        layout.addWidget(QLabel("Thu nh·∫≠p c√° nh√¢n:"), 2, 0)
        layout.addWidget(self.personal_income, 2, 1)
        layout.addWidget(QLabel("Gi·∫£m tr·ª´ gia c·∫£nh:"), 2, 2)
        layout.addWidget(self.family_deduction, 2, 3)
        
        layout.addWidget(QLabel("Thu nh·∫≠p ch·ªãu thu·∫ø:"), 3, 0)
        layout.addWidget(self.taxable_income, 3, 1)
        layout.addWidget(QLabel("B·∫≠c thu·∫ø (%):"), 3, 2)
        layout.addWidget(self.tax_bracket, 3, 3)
        
        layout.addWidget(QLabel("T·ªîNG KH·∫§U TR·ª™:"), 4, 2)
        layout.addWidget(self.total_deduction, 4, 3)
        
        self.form_layout.addWidget(group)
    
    def create_summary_section(self):
        """T·∫°o section t·ªïng k·∫øt"""
        group = QGroupBox("T·ªîNG K·∫æT L∆Ø∆†NG")
        group.setStyleSheet("QGroupBox { font-weight: bold; color: #e83e8c; font-size: 14px; }")
        layout = QGridLayout(group)
        
        # Fields
        self.gross_salary = QLineEdit("0")
        self.gross_salary.setReadOnly(True)
        self.gross_salary.setStyleSheet("font-size: 14px; font-weight: bold; background-color: #e7f3ff;")
        
        self.net_salary = QLineEdit("0")
        self.net_salary.setReadOnly(True)
        self.net_salary.setStyleSheet("font-size: 16px; font-weight: bold; background-color: #d4edda; color: #155724;")
        
        # Layout
        layout.addWidget(QLabel("T·ªïng l∆∞∆°ng (tr∆∞·ªõc kh·∫•u tr·ª´):"), 0, 0)
        layout.addWidget(self.gross_salary, 0, 1)
        
        layout.addWidget(QLabel("L∆Ø∆†NG TH·ª∞C Lƒ®NH:"), 1, 0)
        layout.addWidget(self.net_salary, 1, 1)
        
        self.form_layout.addWidget(group)
    
    def create_action_buttons(self, layout):
        """T·∫°o c√°c n√∫t h√†nh ƒë·ªông"""
        button_layout = QHBoxLayout()
        
        self.btn_calculate = QPushButton("üí∞ T√≠nh l∆∞∆°ng")
        self.btn_calculate.clicked.connect(self.calculate_all)
        self.btn_calculate.setStyleSheet("padding: 10px; background-color: #007bff; color: white; font-weight: bold;")
        
        self.btn_print = QPushButton("üñ®Ô∏è In phi·∫øu l∆∞∆°ng")
        self.btn_print.clicked.connect(self.show_print_dialog)
        self.btn_print.setStyleSheet("padding: 10px; background-color: #6c757d; color: white; font-weight: bold;")
        
        self.btn_save = QPushButton("üíæ L∆∞u")
        self.btn_save.clicked.connect(self.save_salary_data)
        self.btn_save.setStyleSheet("padding: 10px; background-color: #28a745; color: white; font-weight: bold;")
        
        self.btn_clear = QPushButton("üóëÔ∏è X√≥a form")
        self.btn_clear.clicked.connect(self.clear_form)
        self.btn_clear.setStyleSheet("padding: 10px; background-color: #dc3545; color: white; font-weight: bold;")
        
        button_layout.addWidget(self.btn_calculate)
        button_layout.addWidget(self.btn_print)
        button_layout.addWidget(self.btn_save)
        button_layout.addWidget(self.btn_clear)
        button_layout.addStretch()
        
        layout.addLayout(button_layout)
    
    def apply_styles(self):
        """√Åp d·ª•ng styles cho form"""
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 1ex;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QLineEdit {
                border: 1px solid #ccc;
                border-radius: 3px;
                padding: 5px;
                font-size: 11px;
            }
            QLineEdit:read-only {
                background-color: #f8f9fa;
            }
            QComboBox {
                border: 1px solid #ccc;
                border-radius: 3px;
                padding: 5px;
                font-size: 11px;
            }
            QLabel {
                font-size: 11px;
            }
        """)
    
    def load_data(self):
        """Load d·ªØ li·ªáu t·ª´ tab b·∫£ng c√¥ng"""
        try:
            # Clear combos first
            self.period_combo.clear()
            self.employee_combo.clear()
            
            if not self.bang_cong_tab or not hasattr(self.bang_cong_tab, 'monthly_data'):
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ tab b·∫£ng c√¥ng!")
                return
            
            monthly_data = self.bang_cong_tab.monthly_data
            
            # Load periods
            loaded_periods = [period for period, data in monthly_data.items() 
                            if data.get('is_loaded', False)]
            
            if not loaded_periods:
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng c√≥ period n√†o ƒë∆∞·ª£c load!")
                return
            
            self.period_combo.addItems(loaded_periods)
            
            # Load employees for first period
            if loaded_periods:
                self.load_employees_for_period(loaded_periods[0])
            
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ load {len(loaded_periods)} th√°ng!")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói load d·ªØ li·ªáu: {str(e)}")
    
    def load_employees_for_period(self, period):
        """Load danh s√°ch nh√¢n vi√™n cho period"""
        try:
            if not self.bang_cong_tab or not hasattr(self.bang_cong_tab, 'monthly_data'):
                return
            
            monthly_data = self.bang_cong_tab.monthly_data
            if period not in monthly_data or not monthly_data[period].get('is_loaded'):
                return
            
            employees_data = monthly_data[period].get('data_chamcong', {})
            
            # Clear and populate employee combo
            self.employee_combo.clear()
            
            employee_items = []
            for msnv, emp_data in employees_data.items():
                info = emp_data.get('info', {})
                name = info.get('name', msnv)
                employee_items.append(f"{msnv} - {name}")
            
            self.employee_combo.addItems(employee_items)
            
        except Exception as e:
            print(f"L·ªói load employees: {e}")
    
    def on_period_changed(self, period):
        """X·ª≠ l√Ω khi thay ƒë·ªïi period"""
        if period:
            self.load_employees_for_period(period)
    
    def on_employee_changed(self, employee_text):
        """X·ª≠ l√Ω khi thay ƒë·ªïi nh√¢n vi√™n"""
        if employee_text and " - " in employee_text:
            msnv = employee_text.split(" - ")[0]
            period = self.period_combo.currentText()
            self.fill_employee_data(period, msnv)
    
    def fill_employee_data(self, period, msnv):
        """Fill d·ªØ li·ªáu nh√¢n vi√™n v√†o form t·ª´ database v√† d·ªØ li·ªáu ch·∫•m c√¥ng"""
        try:
            self.current_period = period
            self.current_msnv = msnv
            
            # 1. L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ database theo MSNV
            employee_info = self.employee_mapper.get_employee_info(msnv)
            if employee_info:
                self.emp_msnv.setText(msnv)
                self.emp_name.setText(employee_info.get('name', ''))
                self.emp_position.setText(employee_info.get('position', ''))
                self.emp_department.setText(employee_info.get('department', ''))
                self.emp_email.setText('')  # Email kh√¥ng c√≥ trong database hi·ªán t·∫°i
            else:
                # Fallback: l·∫•y t·ª´ JSON n·∫øu kh√¥ng t√¨m th·∫•y trong database
                self.fill_employee_from_json(period, msnv)
            
            # 2. L·∫•y l∆∞∆°ng c∆° b·∫£n t·ª´ quy ƒë·ªãnh l∆∞∆°ng theo t√™n nh√¢n vi√™n
            employee_name = employee_info.get('name', '') if employee_info else ''
            basic_salary = self.get_basic_salary_from_db(employee_name)
            if basic_salary > 0:
                self.basic_salary.setText(self.format_number(basic_salary))
            
            # 3. Fill d·ªØ li·ªáu ch·∫•m c√¥ng t·ª´ tab b·∫£ng c√¥ng
            self.fill_attendance_data(period, msnv)
            
            # 4. T√≠nh to√°n t·∫•t c·∫£
            self.calculate_all()
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói fill d·ªØ li·ªáu: {str(e)}")
    
    def fill_employee_from_json(self, period, msnv):
        """Fallback: Fill th√¥ng tin nh√¢n vi√™n t·ª´ JSON ch·∫•m c√¥ng"""
        try:
            if not self.bang_cong_tab or not hasattr(self.bang_cong_tab, 'monthly_data'):
                return
            
            monthly_data = self.bang_cong_tab.monthly_data
            if period not in monthly_data:
                return
            
            employees_data = monthly_data[period].get('data_chamcong', {})
            if msnv not in employees_data:
                return
            
            employee_data = employees_data[msnv]
            info = employee_data.get('info', {})
            
            self.emp_msnv.setText(msnv)
            self.emp_name.setText(info.get('name', ''))
            self.emp_position.setText(info.get('position', ''))
            self.emp_department.setText(info.get('department', ''))
            self.emp_email.setText(info.get('email', ''))
            
        except Exception as e:
            print(f"L·ªói fill t·ª´ JSON: {e}")
    
    def get_basic_salary_from_db(self, employee_name):
        """L·∫•y l∆∞∆°ng c∆° b·∫£n t·ª´ database quy ƒë·ªãnh l∆∞∆°ng"""
        try:
            if not employee_name or not self.ds_luong_nv:
                print(f"‚ùå Kh√¥ng c√≥ t√™n nh√¢n vi√™n ho·∫∑c d·ªØ li·ªáu l∆∞∆°ng")
                return 20000000  # Default salary
            
            print(f"üîç T√¨m l∆∞∆°ng cho nh√¢n vi√™n: '{employee_name}'")
            print(f"üìä S·ªë l∆∞·ª£ng b·∫£n ghi l∆∞∆°ng: {len(self.ds_luong_nv)}")
            
            # T√¨m l∆∞∆°ng c∆° b·∫£n theo t√™n nh√¢n vi√™n
            for i, luong_record in enumerate(self.ds_luong_nv):
                if isinstance(luong_record, list) and len(luong_record) >= 4:
                    name_in_db = str(luong_record[1]).strip()  # T√™n ·ªü index 1
                    salary_str = str(luong_record[3]).strip()  # L∆∞∆°ng ·ªü index 3
                    print(f"   üìã B·∫£n ghi {i}: T√™n='{name_in_db}', L∆∞∆°ng='{salary_str}'")
                    
                    if name_in_db.lower() == employee_name.lower():
                        # Parse salary (c√≥ th·ªÉ c√≥ d·∫•u ph·∫©y)
                        salary = float(salary_str.replace(',', '').replace(' ', ''))
                        print(f"‚úÖ T√¨m th·∫•y l∆∞∆°ng cho '{employee_name}': {salary:,.0f} VNƒê")
                        return salary
            
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l∆∞∆°ng cho nh√¢n vi√™n: '{employee_name}'")
            return 20000000  # Default n·∫øu kh√¥ng t√¨m th·∫•y
            
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y l∆∞∆°ng c∆° b·∫£n: {e}")
            return 20000000
    
    def fill_attendance_data(self, period, msnv):
        """Fill d·ªØ li·ªáu ch·∫•m c√¥ng t·ª´ tab b·∫£ng c√¥ng"""
        try:
            if not self.bang_cong_tab or not hasattr(self.bang_cong_tab, 'monthly_data'):
                return
            
            monthly_data = self.bang_cong_tab.monthly_data
            if period not in monthly_data:
                return
            
            employees_data = monthly_data[period].get('data_chamcong', {})
            if msnv not in employees_data:
                return
            
            employee_data = employees_data[msnv]
            self.current_employee_data = employee_data
            
            # Fill attendance data
            attendance = employee_data.get('attendance', {})
            summary = attendance.get('summary', {})
            
            if summary:
                self.work_days.setText(str(summary.get('total_work_days', 0)))
                self.office_days.setText(str(summary.get('total_office_days', 0)))
                self.training_days.setText(str(summary.get('total_training_days', 0)))
                
                self.overtime_150_hours.setText(str(summary.get('total_overtime_hours', 0)))
                self.sunday_200_hours.setText(str(summary.get('sunday_200_hours', 0)))
                self.holiday_300_hours.setText(str(summary.get('holiday_300_hours', 0)))
                
                self.paut_meters.setText(str(summary.get('total_paut_meters', 0)))
                self.tofd_meters.setText(str(summary.get('total_tofd_meters', 0)))
            
        except Exception as e:
            print(f"L·ªói fill attendance: {e}")
    
    def get_number_value(self, text):
        """Chuy·ªÉn ƒë·ªïi text th√†nh s·ªë, x·ª≠ l√Ω N/A"""
        try:
            if not text or text.strip() == "" or text.strip().upper() == "N/A":
                return 0
            # Lo·∫°i b·ªè d·∫•u ph·∫©y v√† kho·∫£ng tr·∫Øng
            clean_text = text.replace(',', '').replace(' ', '').strip()
            return float(clean_text)
        except (ValueError, AttributeError):
            return 0
    
    def format_number(self, value):
        """Format s·ªë v·ªõi d·∫•u ph·∫©y"""
        return f"{int(value):,}"
    
    def calculate_basic_salary(self):
        """T√≠nh l∆∞∆°ng c∆° b·∫£n"""
        try:
            work_days = self.get_number_value(self.work_days.text())
            office_days = self.get_number_value(self.office_days.text())
            training_days = self.get_number_value(self.training_days.text())
            overseas_days = self.get_number_value(self.overseas_days.text())
            basic_salary = self.get_number_value(self.basic_salary.text())
            
            total_days = work_days + office_days + training_days + overseas_days
            self.total_work_days.setText(str(int(total_days)))
            
            # T√≠nh l∆∞∆°ng c∆° b·∫£n (gi·∫£ s·ª≠ 26 ng√†y/th√°ng)
            daily_rate = basic_salary / 26
            basic_amount = total_days * daily_rate
            self.basic_amount.setText(self.format_number(basic_amount))
            
            self.calculate_allowances()
            self.calculate_final_totals()
            
        except Exception as e:
            print(f"L·ªói t√≠nh l∆∞∆°ng c∆° b·∫£n: {e}")
    
    def calculate_allowances(self):
        """T√≠nh ph·ª• c·∫•p"""
        try:
            work_days = self.get_number_value(self.work_days.text())
            office_days = self.get_number_value(self.office_days.text())
            training_days = self.get_number_value(self.training_days.text())
            overseas_days = self.get_number_value(self.overseas_days.text())
            
            work_rate = self.get_number_value(self.work_allowance_rate.text())
            training_rate = self.get_number_value(self.training_allowance_rate.text())
            office_rate = self.get_number_value(self.office_allowance_rate.text())
            overseas_rate = self.get_number_value(self.overseas_allowance_rate.text())
            gas_rate = self.get_number_value(self.gas_allowance_rate.text())
            phone_rate = self.get_number_value(self.phone_allowance_rate.text())
            hotel_rate = self.get_number_value(self.hotel_allowance_rate.text())
            
            work_allowance = work_days * work_rate
            training_allowance = training_days * training_rate
            office_allowance = office_days * office_rate
            overseas_allowance = overseas_days * overseas_rate
            gas_allowance = work_days * gas_rate
            phone_allowance = work_days * phone_rate
            hotel_allowance = work_days * hotel_rate
            
            self.work_allowance.setText(self.format_number(work_allowance))
            self.training_allowance.setText(self.format_number(training_allowance))
            self.office_allowance.setText(self.format_number(office_allowance))
            self.overseas_allowance.setText(self.format_number(overseas_allowance))
            self.gas_allowance.setText(self.format_number(gas_allowance))
            self.phone_allowance.setText(self.format_number(phone_allowance))
            self.hotel_allowance.setText(self.format_number(hotel_allowance))
            
            total = work_allowance + training_allowance + office_allowance + overseas_allowance + gas_allowance + phone_allowance + hotel_allowance
            self.total_allowance.setText(self.format_number(total))
            
            self.calculate_final_totals()
            
        except Exception as e:
            print(f"L·ªói t√≠nh ph·ª• c·∫•p: {e}")
    
    def calculate_overtime(self):
        """T√≠nh th√™m gi·ªù"""
        try:
            basic_salary = self.get_number_value(self.basic_salary.text())
            hourly_rate = basic_salary / 26 / 8  # 26 ng√†y, 8 gi·ªù/ng√†y
            
            overtime_150_hours = self.get_number_value(self.overtime_150_hours.text())
            sunday_200_hours = self.get_number_value(self.sunday_200_hours.text())
            holiday_300_hours = self.get_number_value(self.holiday_300_hours.text())
            
            overtime_150_amount = overtime_150_hours * hourly_rate * 1.5
            sunday_200_amount = sunday_200_hours * hourly_rate * 2.0
            holiday_300_amount = holiday_300_hours * hourly_rate * 3.0
            
            self.overtime_150_amount.setText(self.format_number(overtime_150_amount))
            self.sunday_200_amount.setText(self.format_number(sunday_200_amount))
            self.holiday_300_amount.setText(self.format_number(holiday_300_amount))
            
            total = overtime_150_amount + sunday_200_amount + holiday_300_amount
            self.total_overtime.setText(self.format_number(total))
            
            self.calculate_final_totals()
            
        except Exception as e:
            print(f"L·ªói t√≠nh th√™m gi·ªù: {e}")
    
    def calculate_kpi(self):
        """T√≠nh KPI"""
        try:
            paut_meters = self.get_number_value(self.paut_meters.text())
            paut_rate = self.get_number_value(self.paut_rate.text())
            tofd_meters = self.get_number_value(self.tofd_meters.text())
            tofd_rate = self.get_number_value(self.tofd_rate.text())
            other_kpi = self.get_number_value(self.other_kpi.text())
            
            paut_amount = paut_meters * paut_rate
            tofd_amount = tofd_meters * tofd_rate
            
            self.paut_amount.setText(self.format_number(paut_amount))
            self.tofd_amount.setText(self.format_number(tofd_amount))
            
            total = paut_amount + tofd_amount + other_kpi
            self.total_kpi.setText(self.format_number(total))
            
            self.calculate_final_totals()
            
        except Exception as e:
            print(f"L·ªói t√≠nh KPI: {e}")
    
    def calculate_deductions(self):
        """T√≠nh kh·∫•u tr·ª´"""
        try:
            insurance = self.get_number_value(self.insurance_deduction.text())
            tax = self.get_number_value(self.tax_deduction.text())
            advance = self.get_number_value(self.advance_deduction.text())
            other = self.get_number_value(self.other_deduction.text())
            
            total = insurance + tax + advance + other
            self.total_deduction.setText(self.format_number(total))
            
            self.calculate_final_totals()
            
        except Exception as e:
            print(f"L·ªói t√≠nh kh·∫•u tr·ª´: {e}")
    
    def calculate_tax(self):
        """T√≠nh thu·∫ø thu nh·∫≠p c√° nh√¢n"""
        try:
            # T√≠nh thu nh·∫≠p c√° nh√¢n
            basic_amount = self.get_number_value(self.basic_amount.text())
            total_allowance = self.get_number_value(self.total_allowance.text())
            total_overtime = self.get_number_value(self.total_overtime.text())
            total_kpi = self.get_number_value(self.total_kpi.text())
            
            personal_income = basic_amount + total_allowance + total_overtime + total_kpi
            self.personal_income.setText(self.format_number(personal_income))
            
            # T√≠nh thu nh·∫≠p ch·ªãu thu·∫ø
            family_deduction = self.get_number_value(self.family_deduction.text())
            taxable_income = max(0, personal_income - family_deduction)
            self.taxable_income.setText(self.format_number(taxable_income))
            
            # T√≠nh thu·∫ø theo b·∫≠c
            tax_amount = self.calculate_tax_by_bracket(taxable_income)
            self.tax_deduction.setText(self.format_number(tax_amount))
            
            # C·∫≠p nh·∫≠t b·∫≠c thu·∫ø
            bracket = self.get_tax_bracket(taxable_income)
            self.tax_bracket.setText(f"{bracket}%")
            
            self.calculate_deductions()
            
        except Exception as e:
            print(f"L·ªói t√≠nh thu·∫ø: {e}")
    
    def calculate_tax_by_bracket(self, taxable_income):
        """T√≠nh thu·∫ø theo b·∫≠c thu·∫ø"""
        if taxable_income <= 5000000:
            return taxable_income * 0.05
        elif taxable_income <= 10000000:
            return 250000 + (taxable_income - 5000000) * 0.10
        elif taxable_income <= 18000000:
            return 750000 + (taxable_income - 10000000) * 0.15
        elif taxable_income <= 32000000:
            return 1950000 + (taxable_income - 18000000) * 0.20
        elif taxable_income <= 52000000:
            return 4750000 + (taxable_income - 32000000) * 0.25
        elif taxable_income <= 80000000:
            return 9750000 + (taxable_income - 52000000) * 0.30
        else:
            return 18150000 + (taxable_income - 80000000) * 0.35
    
    def get_tax_bracket(self, taxable_income):
        """L·∫•y b·∫≠c thu·∫ø"""
        if taxable_income <= 5000000:
            return 5
        elif taxable_income <= 10000000:
            return 10
        elif taxable_income <= 18000000:
            return 15
        elif taxable_income <= 32000000:
            return 20
        elif taxable_income <= 52000000:
            return 25
        elif taxable_income <= 80000000:
            return 30
        else:
            return 35
    
    def calculate_final_totals(self):
        """T√≠nh t·ªïng cu·ªëi c√πng"""
        try:
            basic_amount = self.get_number_value(self.basic_amount.text())
            total_allowance = self.get_number_value(self.total_allowance.text())
            total_overtime = self.get_number_value(self.total_overtime.text())
            total_kpi = self.get_number_value(self.total_kpi.text())
            total_deduction = self.get_number_value(self.total_deduction.text())
            
            gross_salary = basic_amount + total_allowance + total_overtime + total_kpi
            net_salary = gross_salary - total_deduction
            
            self.gross_salary.setText(self.format_number(gross_salary))
            self.net_salary.setText(self.format_number(net_salary))
            
        except Exception as e:
            print(f"L·ªói t√≠nh t·ªïng: {e}")
    
    def calculate_all(self):
        """T√≠nh to√†n b·ªô"""
        self.calculate_basic_salary()
        self.calculate_allowances()
        self.calculate_overtime()
        self.calculate_kpi()
        self.calculate_deductions()
        self.calculate_final_totals()
    
    def show_print_dialog(self):
        """Hi·ªÉn th·ªã dialog in phi·∫øu l∆∞∆°ng"""
        try:
            # Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n tr∆∞·ªõc khi thu th·∫≠p
            if not self.current_msnv or not self.current_period:
                QMessageBox.warning(self, "C·∫£nh b√°o", 
                    "Vui l√≤ng ch·ªçn nh√¢n vi√™n v√† th√°ng/nƒÉm tr∆∞·ªõc khi in!")
                return
            
            # Thu th·∫≠p d·ªØ li·ªáu hi·ªán t·∫°i
            salary_data = self.collect_salary_data()
            
            # Ki·ªÉm tra chi ti·∫øt d·ªØ li·ªáu nh√¢n vi√™n
            employee_name = salary_data.get('name', '').strip()
            if not employee_name or employee_name == 'N/A' or employee_name == '':
                # Th√™m th√¥ng tin debug ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng
                debug_info = f"""
Th√¥ng tin debug:
- MSNV hi·ªán t·∫°i: {self.current_msnv or 'Ch∆∞a ch·ªçn'}
- Th√°ng/nƒÉm: {self.current_period or 'Ch∆∞a ch·ªçn'}
- T√™n nh√¢n vi√™n: '{employee_name}'
- Tr∆∞·ªùng emp_name: '{self.emp_name.text()}'

Vui l√≤ng:
1. Ch·ªçn nh√¢n vi√™n t·ª´ dropdown
2. ƒê·∫£m b·∫£o ƒë√£ load d·ªØ li·ªáu t·ª´ tab b·∫£ng c√¥ng
3. Ki·ªÉm tra d·ªØ li·ªáu nh√¢n vi√™n trong database
                """
                QMessageBox.warning(self, "C·∫£nh b√°o", 
                    f"Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!\n{debug_info}")
                return
            
            # Hi·ªÉn th·ªã dialog in
            dialog = SalaryPrintDialog(salary_data, self)
            dialog.exec_()
            
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã dialog in: {e}")
    
    def collect_salary_data(self):
        """Thu th·∫≠p d·ªØ li·ªáu l∆∞∆°ng ƒë√£ t√≠nh s·∫µn ƒë·ªÉ in"""
        try:
            return {
                # Th√¥ng tin nh√¢n vi√™n
                'msnv': self.emp_msnv.text(),
                'name': self.emp_name.text(),
                'position': self.emp_position.text(),
                'department': self.emp_department.text(),
                'period': self.current_period or f"{datetime.now().month:02d}/{datetime.now().year}",
                
                # L∆∞∆°ng c∆° b·∫£n
                'basic_salary': self.basic_salary.text(),
                'basic_amount': self.basic_amount.text(),
                'work_days': self.work_days.text(),
                
                # Th√™m gi·ªù
                'overtime_150_hours': self.overtime_150_hours.text(),
                'overtime_150_amount': self.overtime_150_amount.text(),
                'sunday_200_hours': self.sunday_200_hours.text(),
                'sunday_200_amount': self.sunday_200_amount.text(),
                'holiday_300_hours': self.holiday_300_hours.text(),
                'holiday_300_amount': self.holiday_300_amount.text(),
                'total_overtime': self.total_overtime.text(),
                
                # Ph·ª• c·∫•p
                'work_allowance': self.work_allowance.text(),
                'training_allowance': self.training_allowance.text(),
                'office_allowance': self.office_allowance.text(),
                'overseas_allowance': self.overseas_allowance.text(),
                'gas_allowance': self.gas_allowance.text(),
                'phone_allowance': self.phone_allowance.text(),
                'hotel_allowance': self.hotel_allowance.text(),
                'total_allowance': self.total_allowance.text(),
                'training_days': self.training_days.text(),
                'office_days': self.office_days.text(),
                'overseas_days': self.overseas_days.text(),
                
                # KPI
                'paut_meters': self.paut_meters.text(),
                'paut_amount': self.paut_amount.text(),
                'tofd_meters': self.tofd_meters.text(),
                'tofd_amount': self.tofd_amount.text(),
                'total_kpi': self.total_kpi.text(),
                
                # T·ªïng thu nh·∫≠p
                'gross_salary': self.gross_salary.text(),
                
                # Kh·∫•u tr·ª´
                'insurance_deduction': self.insurance_deduction.text(),
                'tax_deduction': self.tax_deduction.text(),
                'advance_deduction': self.advance_deduction.text(),
                'other_deduction': self.other_deduction.text(),
                'total_deduction': self.total_deduction.text(),
                
                # Thu·∫ø
                'taxable_income': self.taxable_income.text(),
                'family_deduction': self.family_deduction.text(),
                'tax_bracket': self.tax_bracket.text(),
                
                # Th·ª±c nh·∫≠n
                'net_salary': self.net_salary.text()
            }
        except Exception as e:
            print(f"L·ªói thu th·∫≠p d·ªØ li·ªáu l∆∞∆°ng: {e}")
            return {}
    
    def save_salary_data(self):
        """L∆∞u d·ªØ li·ªáu l∆∞∆°ng"""
        try:
            if not self.current_msnv or not self.current_period:
                QMessageBox.warning(self, "L·ªói", "Ch∆∞a ch·ªçn nh√¢n vi√™n!")
                return
            
            # T·∫°o d·ªØ li·ªáu l∆∞∆°ng
            salary_data = {
                'msnv': self.current_msnv,
                'period': self.current_period,
                'employee_info': {
                    'name': self.emp_name.text(),
                    'position': self.emp_position.text(),
                    'department': self.emp_department.text(),
                    'email': self.emp_email.text()
                },
                'basic_salary': {
                    'amount': self.get_number_value(self.basic_salary.text()),
                    'work_days': self.get_number_value(self.work_days.text()),
                    'office_days': self.get_number_value(self.office_days.text()),
                    'training_days': self.get_number_value(self.training_days.text()),
                    'overseas_days': self.get_number_value(self.overseas_days.text()),
                    'total_amount': self.get_number_value(self.basic_amount.text())
                },
                'allowances': {
                    'work_allowance': self.get_number_value(self.work_allowance.text()),
                    'training_allowance': self.get_number_value(self.training_allowance.text()),
                    'office_allowance': self.get_number_value(self.office_allowance.text()),
                    'gas_allowance': self.get_number_value(self.gas_allowance.text()),
                    'phone_allowance': self.get_number_value(self.phone_allowance.text()),
                    'hotel_allowance': self.get_number_value(self.hotel_allowance.text()),
                    'total_allowance': self.get_number_value(self.total_allowance.text())
                },
                'overtime': {
                    'overtime_150': self.get_number_value(self.overtime_150_amount.text()),
                    'sunday_200': self.get_number_value(self.sunday_200_amount.text()),
                    'holiday_300': self.get_number_value(self.holiday_300_amount.text()),
                    'total_overtime': self.get_number_value(self.total_overtime.text())
                },
                'kpi': {
                    'paut_amount': self.get_number_value(self.paut_amount.text()),
                    'tofd_amount': self.get_number_value(self.tofd_amount.text()),
                    'other_kpi': self.get_number_value(self.other_kpi.text()),
                    'total_kpi': self.get_number_value(self.total_kpi.text())
                },
                'deductions': {
                    'insurance': self.get_number_value(self.insurance_deduction.text()),
                    'tax': self.get_number_value(self.tax_deduction.text()),
                    'advance': self.get_number_value(self.advance_deduction.text()),
                    'other': self.get_number_value(self.other_deduction.text()),
                    'total_deduction': self.get_number_value(self.total_deduction.text())
                },
                'totals': {
                    'gross_salary': self.get_number_value(self.gross_salary.text()),
                    'net_salary': self.get_number_value(self.net_salary.text())
                },
                'created_date': datetime.now().isoformat()
            }
            
            # L∆∞u v√†o file
            import json
            filename = f"data/salary_{self.current_msnv}_{self.current_period.replace('/', '_')}.json"
            
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(salary_data, f, ensure_ascii=False, indent=2)
            
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u phi·∫øu l∆∞∆°ng v√†o {filename}")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def clear_form(self):
        """X√≥a form"""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô form?", 
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # Clear employee info
            self.emp_msnv.clear()
            self.emp_name.clear()
            self.emp_position.clear()
            self.emp_department.clear()
            self.emp_email.clear()
            
            # Reset values to default
            self.basic_salary.setText("N/A")
            self.work_days.setText("N/A")
            self.office_days.setText("N/A")
            self.training_days.setText("N/A")
            
            self.work_allowance_rate.setText("N/A")
            self.training_allowance_rate.setText("N/A")
            self.office_allowance_rate.setText("N/A")
            self.gas_allowance_rate.setText("N/A")
            self.phone_allowance_rate.setText("N/A")
            self.hotel_allowance_rate.setText("N/A")
            
            self.overtime_150_hours.setText("N/A")
            self.sunday_200_hours.setText("N/A")
            self.holiday_300_hours.setText("N/A")
            
            self.paut_meters.setText("N/A")
            self.paut_rate.setText("N/A")
            self.tofd_meters.setText("N/A")
            self.tofd_rate.setText("N/A")
            self.other_kpi.setText("N/A")
            
            self.insurance_deduction.setText("N/A")
            self.tax_deduction.setText("N/A")
            self.advance_deduction.setText("N/A")
            self.other_deduction.setText("N/A")
            self.personal_income.setText("N/A")
            self.family_deduction.setText("N/A")
            self.taxable_income.setText("N/A")
            self.tax_bracket.setText("N/A")
            
            # Clear calculated fields
            self.calculate_all()
            
            self.current_employee_data = None
            self.current_period = None
            self.current_msnv = None


class SalaryPrintDialog(QDialog):
    """Dialog in phi·∫øu l∆∞∆°ng v·ªõi preview ƒë·∫πp s·ª≠ d·ª•ng ReportLab"""
    
    def __init__(self, salary_data, parent=None):
        super().__init__(parent)
        # Chu·∫©n h√≥a d·ªØ li·ªáu: thay m·ªçi "N/A" b·∫±ng "-" ƒë·ªÉ hi·ªÉn th·ªã
        self.salary_data = {k: (('-' if isinstance(v, str) and v.strip().upper() == 'N/A' else v)) for k, v in salary_data.items()}
        self.setWindowTitle("In Phi·∫øu L∆∞∆°ng - Hitech NDT")
        self.setModal(True)
        self.setMinimumSize(1000, 800)
        self.resize(1200, 900)
        
        self.init_ui()
        self.generate_preview()
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # Toolbar
        toolbar = QHBoxLayout()
        
        self.btn_copy = QPushButton("üñºÔ∏è Copy ·∫£nh")
        self.btn_copy.clicked.connect(self.copy_image)
        self.btn_copy.setStyleSheet("""
            QPushButton {
                background-color: #17a2b8;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #138496; }
        """)
        
        self.btn_save = QPushButton("üíæ L∆∞u ·∫£nh")
        self.btn_save.clicked.connect(self.save_image)
        self.btn_save.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #218838; }
        """)
        
        self.btn_pdf = QPushButton(" Xu·∫•t PDF")
        self.btn_pdf.clicked.connect(self.export_pdf)
        self.btn_pdf.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #c82333; }
        """)
        
        self.btn_print = QPushButton("Ô∏è In")
        self.btn_print.clicked.connect(self.print_document)
        self.btn_print.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #5a6268; }
        """)
        
        toolbar.addWidget(self.btn_copy)
        toolbar.addWidget(self.btn_save)
        toolbar.addWidget(self.btn_pdf)
        toolbar.addWidget(self.btn_print)
        toolbar.addStretch()
        
        layout.addLayout(toolbar)
        
        # Preview area
        self.preview_label = QLabel()
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setStyleSheet("""
            QLabel {
                border: 2px solid #dee2e6;
                border-radius: 8px;
                background-color: #f8f9fa;
            }
        """)
        
        # Scroll area cho preview
        scroll = QScrollArea()
        scroll.setWidget(self.preview_label)
        scroll.setWidgetResizable(True)
        scroll.setMinimumHeight(600)
        
        layout.addWidget(scroll)
        
        # Close button
        close_btn = QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(self.accept)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover { background-color: #5a6268; }
        """)
        layout.addWidget(close_btn)
        
        self.setLayout(layout)
    
    def generate_preview(self):
        """T·∫°o preview phi·∫øu l∆∞∆°ng"""
        try:
            # Lu√¥n t·∫°o ·∫£nh preview chi ti·∫øt b·∫±ng PIL ƒë·ªÉ hi·ªÉn th·ªã gi·ªëng m·∫´u
            temp_pdf = "temp_salary.pdf"
            self.create_pdf_report(temp_pdf)
            if os.path.exists(temp_pdf):
                self.convert_pdf_to_image(temp_pdf)
                os.remove(temp_pdf)
            else:
                self.convert_pdf_to_image("")
        except Exception as e:
            print(f"L·ªói t·∫°o preview: {e}")
            self.convert_pdf_to_image("")
    
    def create_pdf_report(self, filename):
        """T·∫°o PDF report y chang nh∆∞ h√¨nh m·∫´u"""
        try:
            doc = SimpleDocTemplate(filename, pagesize=A4, 
                                  rightMargin=1*cm, leftMargin=1*cm,
                                  topMargin=1*cm, bottomMargin=1*cm)
            
            # Styles
            styles = getSampleStyleSheet()
            
            # Company title style
            company_style = ParagraphStyle(
                'Company',
                parent=styles['Normal'],
                fontSize=14,
                spaceAfter=5,
                alignment=TA_CENTER,
                textColor=colors.darkblue,
                fontName='Helvetica-Bold'
            )
            
            # Main title style
            title_style = ParagraphStyle(
                'Title',
                parent=styles['Normal'],
                fontSize=16,
                spaceAfter=12,
                alignment=TA_CENTER,
                textColor=colors.darkblue,
                fontName='Helvetica-Bold'
            )
            
            # Sub header style
            sub_style = ParagraphStyle(
                'Sub',
                parent=styles['Normal'],
                fontSize=9,
                alignment=TA_LEFT,
                textColor=colors.black,
                fontName='Helvetica'
            )
            
            # Story
            story = []
            
            # Header with logo + title
            logo_path = "logo_hitech.png"
            header_cells = []
            if os.path.exists(logo_path):
                header_logo = Image(logo_path, width=2.2*cm, height=2.2*cm)
            else:
                header_logo = Paragraph("", sub_style)
            header_cells.append([header_logo, Paragraph("PHI·∫æU L∆Ø∆†NG", title_style), Paragraph("", sub_style)])
            header_table = Table(header_cells, colWidths=[2.5*cm, 11*cm, 1.5*cm])
            header_table.setStyle(TableStyle([
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, 0), 'CENTER'),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(header_table)
            story.append(Spacer(1, 6))
            story.append(Paragraph("üè¢ C√îNG TY TNHH D·ªäCH V·ª§ KI·ªÇM TRA KH√îNG PH√Å H·ª¶Y C√îNG NGH·ªÜ CAO", company_style))
            story.append(Spacer(1, 4))
            
            # Th√¥ng tin nh√¢n vi√™n
            period = self.salary_data.get('period', '-')
            month, year = period.split('/') if '/' in period else ('-', '-')
            
            # B·∫£ng th√¥ng tin nh√¢n vi√™n
            emp_info_data = [
                ['Th√°ng:', month, 'NƒÉm:', year],
                ['Nh√¢n Vi√™n:', self.salary_data.get('name', '-').upper(), 'M√£ s·ªë:', self.salary_data.get('msnv', '-')],
                ['Ph√≤ng Ban:', self.salary_data.get('department', '-'), 'Ch·ª©c v·ª•:', self.salary_data.get('position', '-')]
            ]
            
            emp_info_table = Table(emp_info_data, colWidths=[2.5*cm, 6*cm, 2*cm, 5*cm])
            emp_info_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, 0), (0, -1), colors.whitesmoke),
                ('BACKGROUND', (2, 0), (2, -1), colors.whitesmoke),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(emp_info_table)
            story.append(Spacer(1, 10))
            
            # Helpers
            def section_header_bg(start, end):
                # paint light green band like sample
                return ('BACKGROUND', start, end, colors.lightgreen)
            def amount_yellow(start, end):
                return ('BACKGROUND', start, end, colors.yellow)
            
            # (A) L∆Ø∆†NG C∆† B·∫¢N - d√πng s·ªë ng√†y th·ª±c t·∫ø
            work_days_val = self.salary_data.get('work_days', '-')
            basic_data = [
                ['(A) L∆Ø∆†NG C∆† B·∫¢N', 'S·ªë ng√†y l√†m vi·ªác b√¨nh th∆∞·ªùng:', 'Th√†nh ti·ªÅn (vnƒë):'],
                ['', work_days_val, self.format_currency(self.salary_data.get('basic_amount', '-'))]
            ]
            
            basic_table = Table(basic_data, colWidths=[4*cm, 7*cm, 4.5*cm])
            basic_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                section_header_bg((0, 0), (0, 1)),
                amount_yellow((1, 2), (1, 2)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 1), 'CENTER'),
                ('VALIGN', (0, 0), (0, 1), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, 0), 'LEFT'),
                ('ALIGN', (1, 1), (1, 1), 'RIGHT'),
                ('ALIGN', (2, 0), (2, 0), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('SPAN', (0, 0), (1, 0)),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(basic_table)
            story.append(Spacer(1, 8))
            
            # (B) TH√äM GI·ªú
            overtime_data = [
                ['(B) TH√äM GI·ªú', 'Lo·∫°i th√™m gi·ªù', 'S·ªë gi·ªù', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', '150%', self.salary_data.get('overtime_150_hours', '-'), self.format_currency(self.salary_data.get('overtime_150_amount', '-'))],
                ['', '200%', self.salary_data.get('sunday_200_hours', '-'), self.format_currency(self.salary_data.get('sunday_200_amount', '-'))],
                ['', '300%', self.salary_data.get('holiday_300_hours', '-'), self.format_currency(self.salary_data.get('holiday_300_amount', '-'))],
                ['', 'T·ªïng thu nh·∫≠p th√™m gi·ªù:', '', self.format_currency(self.salary_data.get('total_overtime', '-'))]
            ]
            
            overtime_table = Table(overtime_data, colWidths=[4*cm, 4*cm, 2.5*cm, 5*cm])
            overtime_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                section_header_bg((0, 0), (0, 3)),
                ('BACKGROUND', (1, 0), (3, 0), colors.whitesmoke),
                amount_yellow((4, 3), (4, 3)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 4), 'CENTER'),
                ('VALIGN', (0, 0), (0, 4), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, -1), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('ALIGN', (3, 0), (3, -1), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                # B·ªè merge d·ªçc ƒë·ªÉ tr√°nh l·ªói span ReportLab
                # ('SPAN', (0, 0), (4, 0)),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(overtime_table)
            story.append(Spacer(1, 8))
            
            # (C) PH·ª§ C·∫§P
            allowance_data = [
                ['(C) PH·ª§ C·∫§P', 'Lo·∫°i ph·ª• c·∫•p', 'S·ªë ng√†y', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', 'C√¥ng tr∆∞·ªùng (W)', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('work_allowance', '-'))],
                ['', 'ƒê√†o t·∫°o (T)', self.salary_data.get('training_days', '-'), self.format_currency(self.salary_data.get('training_allowance', '-'))],
                ['', 'VƒÉn Ph√≤ng (O)', self.salary_data.get('office_days', '-'), self.format_currency(self.salary_data.get('office_allowance', '-'))],
                ['', 'Ch·ª©c danh (h·ªá s·ªë)', self.salary_data.get('position_coefficient', '0.41'), '-'],
                ['', 'XƒÉng xe', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('gas_allowance', '-'))],
                ['', 'ƒêi·ªán tho·∫°i', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('phone_allowance', '-'))],
                ['', 'Kh√°ch s·∫°n', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('hotel_allowance', '-'))],
                ['', 'T·ªïng thu nh·∫≠p ph·ª• c·∫•p:', '', self.format_currency(self.salary_data.get('total_allowance', '-'))]
            ]
            
            allowance_table = Table(allowance_data, colWidths=[4*cm, 5*cm, 2.5*cm, 5*cm])
            allowance_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                section_header_bg((0, 0), (0, 3)),
                ('BACKGROUND', (1, 0), (3, 0), colors.whitesmoke),
                amount_yellow((8, 3), (8, 3)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 8), 'CENTER'),
                ('VALIGN', (0, 0), (0, 8), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, -1), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('ALIGN', (3, 0), (3, -1), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                # B·ªè merge d·ªçc ƒë·ªÉ tr√°nh l·ªói span ReportLab
                # ('SPAN', (0, 0), (8, 0)),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(allowance_table)
            story.append(Spacer(1, 8))
            
            # (D) KPI
            kpi_data = [
                ['(D) KPI (NƒÇNG SU·∫§T)', 'S·ªë m√©t v∆∞·ª£t', '', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', 'PAUT', self.salary_data.get('paut_meters', '-'), self.format_currency(self.salary_data.get('paut_amount', '-'))],
                ['', 'UT', self.salary_data.get('tofd_meters', '-'), self.format_currency(self.salary_data.get('tofd_amount', '-'))],
                ['', 'T·ªïng thu nh·∫≠p nƒÉng su·∫•t:', '', self.format_currency(self.salary_data.get('total_kpi', '-'))]
            ]
            
            kpi_table = Table(kpi_data, colWidths=[4*cm, 3*cm, 4*cm, 5*cm])
            kpi_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                section_header_bg((0, 0), (0, 3)),
                ('BACKGROUND', (1, 0), (3, 0), colors.whitesmoke),
                amount_yellow((3, 3), (3, 3)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 3), 'CENTER'),
                ('VALIGN', (0, 0), (0, 3), 'MIDDLE'),
                # B·ªè merge h√†ng ti√™u ƒë·ªÅ ph·ª• ƒë·ªÉ an to√†n
                # ('SPAN', (1, 0), (2, 0)),
                ('ALIGN', (1, 0), (1, 0), 'CENTER'),
                ('FONTNAME', (1, 0), (2, 0), 'Helvetica'),
                ('ALIGN', (1, 0), (1, -1), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('ALIGN', (3, 0), (3, -1), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                # B·ªè merge d·ªçc ƒë·ªÉ tr√°nh l·ªói span ReportLab
                # ('SPAN', (0, 0), (3, 0)),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(kpi_table)
            story.append(Spacer(1, 8))
            
            # T·ªîNG C·ªòNG
            total_data = [
                ['(I) T·ªïng c·ªông (vnƒë)=(A)+(B)+(C)+(D):', self.format_currency(self.salary_data.get('gross_salary', '-'))]
            ]
            
            total_table = Table(total_data, colWidths=[10*cm, 5*cm])
            total_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                amount_yellow((1, 0), (1, 0)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('ALIGN', (0, 0), (0, 0), 'LEFT'),
                ('ALIGN', (1, 0), (1, 0), 'RIGHT'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            
            story.append(total_table)
            story.append(Spacer(1, 8))
            
            # (E) C√ÅC KHO·∫¢N KH·∫§U TR·ª™
            deductions_data = [
                ['(E) C√ÅC KHO·∫¢N KH·∫§U TR·ª™', 'H·ªá s·ªë b·∫£o hi·ªÉm', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', '10.50%', self.format_currency(self.salary_data.get('insurance_deduction', '-'))],
                ['', 'Thu·∫ø TNCN:', self.format_currency(self.salary_data.get('tax_deduction', '-'))],
                ['', 'Thu nh·∫≠p ch·ªãu thu·∫ø:', self.format_currency(self.salary_data.get('taxable_income', '-'))],
                ['', 'Gi·∫£m tr·ª´ gia c·∫£nh:', self.format_currency(self.salary_data.get('family_deduction', '-'))],
                ['', 'B·∫≠c thu·∫ø:', self.salary_data.get('tax_bracket', '-')],
                ['', 'T·∫°m ·ª©ng:', self.format_currency(self.salary_data.get('advance_deduction', '-'))],
                ['', 'Vi ph·∫°m:', self.format_currency(self.salary_data.get('other_deduction', '-'))],
                ['', 'Ti·ªÅn ƒë√†o t·∫°o (UT ISO):', '-'],
                ['', 'T·ªïng kh·∫•u tr·ª´:', self.format_currency(self.salary_data.get('total_deduction', '-'))]
            ]
            deductions_table = Table(deductions_data, colWidths=[4*cm, 9*cm, 5*cm])
            deductions_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                section_header_bg((0, 0), (0, 9)),
                ('BACKGROUND', (1, 0), (2, 0), colors.whitesmoke),
                amount_yellow((9, 2), (9, 2)),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 9), 'CENTER'),
                ('VALIGN', (0, 0), (0, 9), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, -1), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('SPAN', (0, 0), (9, 0)),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            story.append(deductions_table)
            story.append(Spacer(1, 8))
            
            # (F) THANH TO√ÅN MUA S·∫ÆM
            purchases_total = self.format_currency('-')
            purchases_data = [
                ['(F) THANH TO√ÅN MUA S·∫ÆM', purchases_total]
            ]
            purchases_table = Table(purchases_data, colWidths=[10*cm, 5*cm])
            purchases_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('ALIGN', (0, 0), (0, 0), 'LEFT'),
                ('ALIGN', (1, 0), (1, 0), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            story.append(purchases_table)
            story.append(Spacer(1, 8))
            
            # TH·ª∞C NH·∫¨N (thanh ƒë·ªè)
            net_data = [
                ['TH·ª∞C NH·∫¨N (VNƒê)=I-E+F:', self.format_currency(self.salary_data.get('net_salary', '-'))]
            ]
            net_table = Table(net_data, colWidths=[10*cm, 5*cm])
            net_table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, 0), (-1, -1), colors.yellow),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.red),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 14),
                ('ALIGN', (0, 0), (0, 0), 'LEFT'),
                ('ALIGN', (1, 0), (1, 0), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
                ('BOX', (0, 0), (-1, -1), 1.2, colors.red),
            ]))
            story.append(net_table)
            story.append(Spacer(1, 4))
            
            # Build PDF
            doc.build(story)
            return True
            
        except Exception as e:
            print(f"L·ªói t·∫°o PDF: {e}")
            return False
    
    def convert_pdf_to_image(self, pdf_path):
        """Convert PDF th√†nh ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã"""
        try:
            if PIL_AVAILABLE:
                # T·∫°o ·∫£nh t·ª´ PDF th·∫≠t
                self.create_preview_from_pdf(pdf_path)
            else:
                self.create_simple_preview()
        except Exception as e:
            print(f"L·ªói convert PDF: {e}")
            self.create_simple_preview()
    
    def create_preview_from_pdf(self, pdf_path):
        """T·∫°o preview t·ª´ PDF th·∫≠t v·ªõi b·∫£ng merge cell ƒë·∫πp"""
        try:
            # T·∫°m th·ªùi t·∫°o ·∫£nh ƒë·∫πp t·ª´ d·ªØ li·ªáu
            width, height = 800, 1200
            img = PILImage.new('RGB', (width, height), 'white')
            draw = ImageDraw.Draw(img)
            
            # Font
            try:
                font_large = ImageFont.truetype("arial.ttf", 18)
                font_medium = ImageFont.truetype("arial.ttf", 14)
                font_small = ImageFont.truetype("arial.ttf", 10)
                font_bold = ImageFont.truetype("arialbd.ttf", 12)
            except:
                font_large = ImageFont.load_default()
                font_medium = ImageFont.load_default()
                font_small = ImageFont.load_default()
                font_bold = ImageFont.load_default()
            
            y = 30
            
            # Header
            # Logo (n·∫øu c√≥)
            try:
                logo_path = "logo_hitech.png"
                if os.path.exists(logo_path):
                    logo_img = PILImage.open(logo_path).convert('RGBA')
                    logo_img = logo_img.resize((80, 80))
                    img.paste(logo_img, (30, y-10), logo_img)
            except Exception as _:
                pass

            draw.text((width//2 - 240, y), "C√îNG TY TNHH D·ªäCH V·ª§ KI·ªÇM TRA KH√îNG PH√Å H·ª¶Y C√îNG NGH·ªÜ CAO", fill='darkblue', font=font_large)
            y += 40
            draw.text((width//2 - 60, y), "PHI·∫æU L∆Ø∆†NG", fill='darkblue', font=font_large)
            y += 60
            
            # Th√¥ng tin nh√¢n vi√™n
            period = self.salary_data.get('period', '-')
            month, year = period.split('/') if '/' in period else ('-', '-')
            
            # V·∫Ω b·∫£ng th√¥ng tin nh√¢n vi√™n
            self.draw_merged_table(draw, 20, y, width-40, 80, [
                ['Th√°ng:', month, 'NƒÉm:', year],
                ['Nh√¢n Vi√™n:', self.salary_data.get('name', 'N/A').upper(), 'M√£ s·ªë:', self.salary_data.get('msnv', 'N/A')],
                ['Ph√≤ng Ban:', self.salary_data.get('department', 'N/A'), 'Ch·ª©c v·ª•:', self.salary_data.get('position', 'N/A')]
            ], font_small)
            y += 100
            
            # (A) L∆Ø∆†NG C∆† B·∫¢N - B·∫£ng 2x3 v·ªõi merge cell
            self.draw_merged_table(draw, 20, y, width-40, 60, [
                ['(A) L∆Ø∆†NG C∆† B·∫¢N', 'S·ªë ng√†y l√†m vi·ªác b√¨nh th∆∞·ªùng:', 'Th√†nh ti·ªÅn (vnƒë):'],
                ['', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('basic_amount', '-'))]
            ], font_small, merge_cells=[(0, 0, 1, 0)], bg_color='lightgreen')
            y += 80
            
            # (B) TH√äM GI·ªú - B·∫£ng v·ªõi merge cell
            self.draw_merged_table(draw, 20, y, width-40, 120, [
                ['(B) TH√äM GI·ªú', 'Lo·∫°i th√™m gi·ªù', 'S·ªë gi·ªù', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', '150%', self.salary_data.get('overtime_150_hours', '-'), self.format_currency(self.salary_data.get('overtime_150_amount', '-'))],
                ['', '200%', self.salary_data.get('sunday_200_hours', '-'), self.format_currency(self.salary_data.get('sunday_200_amount', '-'))],
                ['', '300%', self.salary_data.get('holiday_300_hours', '-'), self.format_currency(self.salary_data.get('holiday_300_amount', '-'))],
                ['', 'T·ªïng thu nh·∫≠p th√™m gi·ªù:', '', self.format_currency(self.salary_data.get('total_overtime', '-'))]
            ], font_small, merge_cells=[(0, 0, 4, 0)])
            y += 140
            
            # (C) PH·ª§ C·∫§P - B·∫£ng v·ªõi merge cell
            self.draw_merged_table(draw, 20, y, width-40, 200, [
                ['(C) PH·ª§ C·∫§P', 'Lo·∫°i ph·ª• c·∫•p', 'S·ªë ng√†y', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', 'C√¥ng tr∆∞·ªùng (W)', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('work_allowance', '-'))],
                ['', 'ƒê√†o t·∫°o (T)', self.salary_data.get('training_days', '-'), self.format_currency(self.salary_data.get('training_allowance', '-'))],
                ['', 'VƒÉn Ph√≤ng (O)', self.salary_data.get('office_days', '-'), self.format_currency(self.salary_data.get('office_allowance', '-'))],
                ['', 'Ch·ª©c danh (h·ªá s·ªë)', self.salary_data.get('position_coefficient', '0.41'), '-'],
                ['', 'XƒÉng xe', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('gas_allowance', '-'))],
                ['', 'ƒêi·ªán tho·∫°i', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('phone_allowance', '-'))],
                ['', 'Kh√°ch s·∫°n', self.salary_data.get('work_days', '-'), self.format_currency(self.salary_data.get('hotel_allowance', '-'))],
                ['', 'T·ªïng thu nh·∫≠p ph·ª• c·∫•p:', '', self.format_currency(self.salary_data.get('total_allowance', '-'))]
            ], font_small, merge_cells=[(0, 0, 8, 0)])
            y += 220
            
            # (D) KPI - B·∫£ng v·ªõi merge cell
            self.draw_merged_table(draw, 20, y, width-40, 80, [
                ['(D) KPI (NƒÇNG SU·∫§T)', 'S·ªë m√©t v∆∞·ª£t', '', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', 'PAUT', self.salary_data.get('paut_meters', '-'), self.format_currency(self.salary_data.get('paut_amount', '-'))],
                ['', 'UT', self.salary_data.get('tofd_meters', '-'), self.format_currency(self.salary_data.get('tofd_amount', '-'))],
                ['', 'T·ªïng thu nh·∫≠p nƒÉng su·∫•t:', '', self.format_currency(self.salary_data.get('total_kpi', '-'))]
            ], font_small, merge_cells=[(0, 0, 3, 0), (0, 1, 0, 2)], colored_merges=[((0, 0, 3, 0), 'lightgreen')])
            y += 100
            
            # T·ªîNG C·ªòNG
            self.draw_merged_table(draw, 20, y, width-40, 40, [
                ['(I) T·ªïng c·ªông (vnƒë)=(A)+(B)+(C)+(D):', self.format_currency(self.salary_data.get('gross_salary', '-'))]
            ], font_small)
            y += 60
            
            # (E) KH·∫§U TR·ª™ - B·∫£ng v·ªõi merge cell
            self.draw_merged_table(draw, 20, y, width-40, 180, [
                ['(E) C√ÅC KHO·∫¢N KH·∫§U TR·ª™', 'H·ªá s·ªë b·∫£o hi·ªÉm', 'Th√†nh ti·ªÅn (vnƒë)'],
                ['', '10.50%', self.format_currency(self.salary_data.get('insurance_deduction', '-'))],
                ['', 'Thu·∫ø TNCN:', self.format_currency(self.salary_data.get('tax_deduction', '-'))],
                ['', 'Thu nh·∫≠p ch·ªãu thu·∫ø:', self.format_currency(self.salary_data.get('taxable_income', '-'))],
                ['', 'Gi·∫£m tr·ª´ gia c·∫£nh:', self.format_currency(self.salary_data.get('family_deduction', '-'))],
                ['', 'B·∫≠c thu·∫ø:', self.salary_data.get('tax_bracket', '-')],
                ['', 'T·∫°m ·ª©ng:', self.format_currency(self.salary_data.get('advance_deduction', '-'))],
                ['', 'Vi ph·∫°m:', self.format_currency(self.salary_data.get('other_deduction', '-'))],
                ['', 'Ti·ªÅn ƒë√†o t·∫°o (UT ISO):', '-'],
                ['', 'T·ªïng kh·∫•u tr·ª´:', self.format_currency(self.salary_data.get('total_deduction', '-'))]
            ], font_small, merge_cells=[(0, 0, 9, 0)])
            y += 200
            
            # (F) THANH TO√ÅN MUA S·∫ÆM
            self.draw_merged_table(
                draw,
                20,
                y,
                width-40,
                40,
                [['(F) THANH TO√ÅN MUA S·∫ÆM', self.format_currency('-')]],
                font_small,
                merge_cells=[(0, 0, 0, 0)],
                colored_merges=[((0, 0, 0, 0), 'lightgreen')]
            )
            y += 60
            
            # TH·ª∞C NH·∫¨N (n·ªÅn v√†ng, ch·ªØ ƒë·ªè, font l·ªõn)
            self.draw_merged_table(
                draw,
                20,
                y,
                width-40,
                40,
                [['TH·ª∞C NH·∫¨N (VNƒê)=I-E+F:', self.format_currency(self.salary_data.get('net_salary', '-'))]],
                font_medium,
                merge_cells=None,
                text_color='red',
                colored_merges=[((0, 0, 0, 1), 'yellow')]
            )
            
            # Convert PIL Image to QPixmap
            img_bytes = img.tobytes('raw', 'RGB')
            qimg = QImage(img_bytes, width, height, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(qimg)
            
            self.preview_label.setPixmap(pixmap.scaled(800, 1200, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            
        except Exception as e:
            print(f"L·ªói t·∫°o preview t·ª´ PDF: {e}")
            self.create_simple_preview()
    
    def draw_merged_table(self, draw, x, y, width, height, data, font, merge_cells=None, bg_color='lightgreen', text_color='black', colored_merges=None):
        """V·∫Ω b·∫£ng v·ªõi merge cell"""
        try:
            rows = len(data)
            cols = len(data[0]) if data else 0
            cell_width = width // cols
            cell_height = height // rows
            
            # N·∫øu c√≥ colored_merges m√† kh√¥ng c√≥ merge_cells, v·∫´n cho ph√©p t√¥ n·ªÅn theo v√πng ch·ªâ ƒë·ªãnh
            if (colored_merges and (not merge_cells or len(merge_cells) == 0)):
                for cm, color in colored_merges:
                    sr, sc, er, ec = cm
                    merge_x = x + sc * cell_width
                    merge_y = y + sr * cell_height
                    merge_width = (ec - sc + 1) * cell_width
                    merge_height = (er - sr + 1) * cell_height
                    draw.rectangle([merge_x, merge_y, merge_x + merge_width, merge_y + merge_height], fill=color)
            
            # V·∫Ω background cho merge cells TR∆Ø·ªöC, v√† ghi nh·ªõ v√πng merge ƒë·ªÉ b·ªè c√°c ƒë∆∞·ªùng k·∫ª b√™n trong
            if merge_cells:
                for merge in merge_cells:
                    start_row, start_col, end_row, end_col = merge
                    merge_x = x + start_col * cell_width
                    merge_y = y + start_row * cell_height
                    merge_width = (end_col - start_col + 1) * cell_width
                    merge_height = (end_row - start_row + 1) * cell_height
                    
                    # V·∫Ω background
                    fill_color = None
                    if colored_merges:
                        for cm, color in colored_merges:
                            if cm == merge:
                                fill_color = color
                                break
                    else:
                        fill_color = bg_color
                    if fill_color:
                        draw.rectangle([merge_x, merge_y, merge_x + merge_width, merge_y + merge_height], fill=fill_color)
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª, b·ªè c√°c ƒë∆∞·ªùng k·∫ª b√™n trong v√πng merge
            def inside_any_merge_line_h(hy):
                if not merge_cells:
                    return False
                for mr in merge_cells:
                    sr, sc, er, ec = mr
                    if sr < er:  # c√≥ chi·ªÅu d·ªçc
                        y1 = y + sr * cell_height
                        y2 = y + (er + 1) * cell_height
                        if y1 < hy < y2:
                            # n·∫øu ƒë∆∞·ªùng ngang n·∫±m trong c·ªôt b·ªã merge, b·ªè ƒëo·∫°n t·ª´ c·ªôt sc ƒë·∫øn ec
                            return True
                return False
            def inside_any_merge_line_v(vx):
                if not merge_cells:
                    return False
                for mr in merge_cells:
                    sr, sc, er, ec = mr
                    if sc < ec:
                        x1 = x + sc * cell_width
                        x2 = x + (ec + 1) * cell_width
                        if x1 < vx < x2:
                            return True
                return False

            for i in range(rows + 1):
                hy = y + i * cell_height
                if inside_any_merge_line_h(hy):
                    # v·∫Ω 2 ƒëo·∫°n t√°ch b√™n ngo√†i v√πng merge
                    for mr in merge_cells or []:
                        sr, sc, er, ec = mr
                        if sr < er and (y + sr * cell_height) < hy < (y + (er + 1) * cell_height):
                            left_x = x
                            right_x = x + cols * cell_width
                            merge_left = x + sc * cell_width
                            merge_right = x + (ec + 1) * cell_width
                            draw.line([left_x, hy, merge_left, hy], fill='black', width=1)
                            draw.line([merge_right, hy, right_x, hy], fill='black', width=1)
                    continue
                draw.line([x, hy, x + width, hy], fill='black', width=1)

            for j in range(cols + 1):
                vx = x + j * cell_width
                if inside_any_merge_line_v(vx):
                    for mr in merge_cells or []:
                        sr, sc, er, ec = mr
                        if sc < ec and (x + sc * cell_width) < vx < (x + (ec + 1) * cell_width):
                            top_y = y
                            bottom_y = y + rows * cell_height
                            merge_top = y + sr * cell_height
                            merge_bottom = y + (er + 1) * cell_height
                            draw.line([vx, top_y, vx, merge_top], fill='black', width=1)
                            draw.line([vx, merge_bottom, vx, bottom_y], fill='black', width=1)
                    continue
                draw.line([vx, y, vx, y + height], fill='black', width=1)
            
            # V·∫Ω text
            for i, row in enumerate(data):
                for j, cell in enumerate(row):
                    if cell:  # Ch·ªâ v·∫Ω n·∫øu cell kh√¥ng r·ªóng
                        # Ki·ªÉm tra xem cell c√≥ b·ªã merge kh√¥ng
                        is_merged = False
                        if merge_cells:
                            for merge in merge_cells:
                                start_row, start_col, end_row, end_col = merge
                                if start_row <= i <= end_row and start_col <= j <= end_col:
                                    is_merged = True
                                    break
                        
                        if not is_merged:  # Ch·ªâ v·∫Ω text n·∫øu cell kh√¥ng b·ªã merge
                            text_x = x + j * cell_width + 5
                            text_y = y + i * cell_height + 5
                            draw.text((text_x, text_y), str(cell), fill=text_color, font=font)
            
            # V·∫Ω text cho merge cells
            if merge_cells:
                for merge in merge_cells:
                    start_row, start_col, end_row, end_col = merge
                    merge_x = x + start_col * cell_width
                    merge_y = y + start_row * cell_height
                    merge_width = (end_col - start_col + 1) * cell_width
                    merge_height = (end_row - start_row + 1) * cell_height
                    
                    # L·∫•y text t·ª´ cell ƒë·∫ßu ti√™n
                    text = str(data[start_row][start_col])
                    if text:
                        # CƒÉn gi·ªØa text trong merge cell
                        text_x = merge_x + merge_width // 2 - len(text) * 3
                        text_y = merge_y + merge_height // 2 - 5
                        draw.text((text_x, text_y), text, fill=text_color, font=font)
                    # Vi·ªÅn ngo√†i v√πng merge: v·∫Ω m·∫£nh ƒë·ªÉ ƒë·ªìng nh·∫•t v·ªõi c√°c √¥ kh√°c
                    draw.rectangle([merge_x, merge_y, merge_x + merge_width, merge_y + merge_height], outline='black', width=1)
            
        except Exception as e:
            print(f"L·ªói v·∫Ω b·∫£ng merge: {e}")
    
    def create_simple_preview(self):
        """T·∫°o preview ƒë∆°n gi·∫£n khi kh√¥ng c√≥ ReportLab"""
        try:
            # T·∫°o ·∫£nh ƒë∆°n gi·∫£n v·ªõi PIL
            if PIL_AVAILABLE:
                width, height = 800, 1000
                img = PILImage.new('RGB', (width, height), 'white')
                draw = ImageDraw.Draw(img)
                
                # Font
                try:
                    font_large = ImageFont.truetype("arial.ttf", 20)
                    font_medium = ImageFont.truetype("arial.ttf", 14)
                    font_small = ImageFont.truetype("arial.ttf", 10)
                except:
                    font_large = ImageFont.load_default()
                    font_medium = ImageFont.load_default()
                    font_small = ImageFont.load_default()
                
                y = 20
                
                # Header
                draw.text((width//2 - 100, y), "C√îNG TY TNHH HITECH NDT", fill='darkblue', font=font_large)
                y += 40
                draw.text((width//2 - 50, y), "PHI·∫æU L∆Ø∆†NG", fill='darkblue', font=font_large)
                y += 60
                
                # Th√¥ng tin nh√¢n vi√™n
                period = self.salary_data.get('period', 'N/A')
                month, year = period.split('/') if '/' in period else ('N/A', 'N/A')
                
                info_text = f"Th√°ng: {month} | NƒÉm: {year} | Nh√¢n vi√™n: {self.salary_data.get('name', 'N/A')}"
                draw.text((20, y), info_text, fill='black', font=font_medium)
                y += 30
                
                info_text2 = f"M√£ s·ªë: {self.salary_data.get('msnv', 'N/A')} | Ph√≤ng ban: {self.salary_data.get('department', 'N/A')}"
                draw.text((20, y), info_text2, fill='black', font=font_medium)
                y += 50
                
                # C√°c section
                sections = [
                    ("(A) L∆Ø∆†NG C∆† B·∫¢N", f"S·ªë ng√†y: {self.salary_data.get('work_days', 'N/A')} | Th√†nh ti·ªÅn: {self.format_currency(self.salary_data.get('basic_amount', 'N/A'))}"),
                    ("(B) TH√äM GI·ªú", f"T·ªïng: {self.format_currency(self.salary_data.get('total_overtime', 'N/A'))}"),
                    ("(C) PH·ª§ C·∫§P", f"T·ªïng: {self.format_currency(self.salary_data.get('total_allowance', 'N/A'))}"),
                    ("(D) KPI", f"T·ªïng: {self.format_currency(self.salary_data.get('total_kpi', 'N/A'))}"),
                    ("T·ªîNG C·ªòNG", f"{self.format_currency(self.salary_data.get('gross_salary', 'N/A'))}"),
                    ("(E) KH·∫§U TR·ª™", f"T·ªïng: {self.format_currency(self.salary_data.get('total_deduction', 'N/A'))}"),
                    ("TH·ª∞C NH·∫¨N", f"{self.format_currency(self.salary_data.get('net_salary', 'N/A'))}")
                ]
                
                for title, content in sections:
                    draw.text((20, y), title, fill='darkblue', font=font_medium)
                    y += 25
                    draw.text((40, y), content, fill='black', font=font_small)
                    y += 35
                
                # Convert PIL Image to QPixmap
                img_bytes = img.tobytes('raw', 'RGB')
                qimg = QImage(img_bytes, width, height, QImage.Format_RGB888)
                pixmap = QPixmap.fromImage(qimg)
                
                self.preview_label.setPixmap(pixmap.scaled(800, 1000, Qt.KeepAspectRatio, Qt.SmoothTransformation))
                
            else:
                # Fallback: t·∫°o text ƒë∆°n gi·∫£n
                text = f"""
                C√îNG TY TNHH HITECH NDT
                PHI·∫æU L∆Ø∆†NG
                
                Th√°ng: {self.salary_data.get('period', 'N/A')}
                Nh√¢n vi√™n: {self.salary_data.get('name', 'N/A')}
                M√£ s·ªë: {self.salary_data.get('msnv', 'N/A')}
                
                (A) L∆Ø∆†NG C∆† B·∫¢N: {self.format_currency(self.salary_data.get('basic_amount', 'N/A'))}
                (B) TH√äM GI·ªú: {self.format_currency(self.salary_data.get('total_overtime', 'N/A'))}
                (C) PH·ª§ C·∫§P: {self.format_currency(self.salary_data.get('total_allowance', 'N/A'))}
                (D) KPI: {self.format_currency(self.salary_data.get('total_kpi', 'N/A'))}
                
                T·ªîNG C·ªòNG: {self.format_currency(self.salary_data.get('gross_salary', 'N/A'))}
                
                (E) KH·∫§U TR·ª™: {self.format_currency(self.salary_data.get('total_deduction', 'N/A'))}
                
                TH·ª∞C NH·∫¨N: {self.format_currency(self.salary_data.get('net_salary', 'N/A'))}
                """
                
                self.preview_label.setText(text)
                self.preview_label.setStyleSheet("""
                    QLabel {
                        font-family: 'Courier New', monospace;
                        font-size: 12px;
                        color: black;
                        background-color: white;
                        padding: 20px;
                        border: 2px solid #dee2e6;
                        border-radius: 8px;
                    }
                """)
                
        except Exception as e:
            print(f"L·ªói t·∫°o preview ƒë∆°n gi·∫£n: {e}")
            self.preview_label.setText("Kh√¥ng th·ªÉ t·∫°o preview")
    
    def format_currency(self, value):
        """Format s·ªë ti·ªÅn v·ªõi d·∫•u ph·∫©y"""
        try:
            if not value or value == '0' or str(value).strip().upper() == 'N/A' or str(value).strip() == '-':
                return '-'
            num = float(str(value).replace(',', '').replace(' ', ''))
            return f"{num:,.0f}"
        except:
            return '-'
    
    def copy_image(self):
        """Copy ·∫£nh v√†o clipboard"""
        try:
            clipboard = QApplication.clipboard()
            clipboard.setPixmap(self.preview_label.pixmap())
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ copy ·∫£nh v√†o clipboard!")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ copy ·∫£nh: {e}")
    
    def save_image(self):
        """L∆∞u ·∫£nh"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "L∆∞u ·∫£nh phi·∫øu l∆∞∆°ng", 
                f"phieu_luong_{self.salary_data.get('msnv', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                "PNG Files (*.png);;JPEG Files (*.jpg);;All Files (*)"
            )
            
            if file_path:
                self.preview_label.pixmap().save(file_path)
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u ·∫£nh: {file_path}")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ·∫£nh: {e}")
    
    def export_pdf(self):
        """Xu·∫•t PDF"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Xu·∫•t PDF phi·∫øu l∆∞∆°ng", 
                f"phieu_luong_{self.salary_data.get('msnv', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "PDF Files (*.pdf);;All Files (*)"
            )
            
            if file_path:
                if REPORTLAB_AVAILABLE:
                    self.create_pdf_report(file_path)
                    QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t PDF: {file_path}")
                else:
                    QMessageBox.warning(self, "L·ªói", "ReportLab kh√¥ng c√≥ s·∫µn. C√†i ƒë·∫∑t: pip install reportlab")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t PDF: {e}")
    
    def print_document(self):
        """In t√†i li·ªáu"""
        try:
            printer = QPrinter(QPrinter.HighResolution)
            dialog = QPrintDialog(printer, self)
            
            if dialog.exec_() == QPrintDialog.Accepted:
                painter = QPainter(printer)
                if self.preview_label.pixmap():
                    painter.drawPixmap(0, 0, self.preview_label.pixmap())
                painter.end()
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ g·ª≠i t√†i li·ªáu ƒë·∫øn m√°y in!")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ in t√†i li·ªáu: {e}")
    
    def add_logo_to_pdf(self, story):
        """Th√™m logo v√†o PDF"""
        try:
            # Ki·ªÉm tra xem c√≥ file logo kh√¥ng
            logo_path = "logo_hitech.png"
            if os.path.exists(logo_path):
                logo = Image(logo_path, width=2*cm, height=2*cm)
                logo.hAlign = 'CENTER'
                story.append(logo)
                story.append(Spacer(1, 10))
            else:
                # N·∫øu kh√¥ng c√≥ logo, d√πng text
                story.append(Paragraph("", ParagraphStyle(
                    'Logo',
                    parent=styles['Normal'],
                    fontSize=24,
                    alignment=TA_CENTER,
                    textColor=colors.darkblue
                )))
                story.append(Spacer(1, 5))
        except Exception as e:
            print(f"L·ªói th√™m logo: {e}")